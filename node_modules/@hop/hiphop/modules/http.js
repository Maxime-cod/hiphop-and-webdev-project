"use strict";
export {httpRequest};
export {HttpRequest};
"use strict";
import * as $$hiphop from '@hop/hiphop';
import * as http from 'http';
import * as https from 'https';
import {parse} from 'url';
let HttpRequest=$$hiphop.INTERFACE({"id":"HttpRequest","%location":{"filename":"modules/http.hh.js","pos":1322},"%tag":"interface"},$$hiphop.SIGNAL({"%location":{"filename":"modules/http.hh.js","pos":1349},"direction":"OUT","name":"response"}),$$hiphop.SIGNAL({"%location":{"filename":"modules/http.hh.js","pos":1366},"direction":"INOUT","name":"pulse"}));
const httpRequest=$$hiphop.MODULE({"id":"httpRequest","%location":{"filename":"modules/http.hh.js","pos":1611},"%tag":"module"},$$hiphop.INTF({"%value":HttpRequest,"mirror":false,"%location":{"filename":"modules/http.hh.js","pos":1706},"%tag":"interface"}),$$hiphop.FRAME({"fun":function (){let requestOrUrl;
let optionsOrPayload;
let payload;
return $$hiphop.SEQUENCE({"%location":{"filename":"modules/http.hh.js","pos":1611},"%tag":"frame"},$$hiphop.ATOM({"%location":{"filename":"modules/http.hh.js","pos":1611},"%tag":"frame","apply":function (__frame){requestOrUrl=((0 < __frame.length) ? (__frame[0]) : (undefined));
optionsOrPayload=((1 < __frame.length) ? (__frame[1]) : (undefined));
payload=((2 < __frame.length) ? (__frame[2]) : (undefined));
}
}),(function (){let state=undefined;
return $$hiphop.SEQUENCE({"%location":{"filename":"modules/http.hh.js","pos":2071},"%tag":"let"},$$hiphop.ATOM({"%location":{"filename":"modules/http.hh.js","pos":2075},"%tag":"hop","apply":function (){state="active";
}
}),(function (){let req=undefined;
return $$hiphop.SEQUENCE({"%location":{"filename":"modules/http.hh.js","pos":2096},"%tag":"let"},$$hiphop.ATOM({"%location":{"filename":"modules/http.hh.js","pos":2100},"%tag":"hop","apply":function (){req=false;
}
}),(function (){let ended=undefined;
return $$hiphop.SEQUENCE({"%location":{"filename":"modules/http.hh.js","pos":2116},"%tag":"let"},$$hiphop.ATOM({"%location":{"filename":"modules/http.hh.js","pos":2120},"%tag":"hop","apply":function (){ended=false;
}
}),(function (){let self=undefined;
return $$hiphop.SEQUENCE({"%location":{"filename":"modules/http.hh.js","pos":2138},"%tag":"let"},$$hiphop.ATOM({"%location":{"filename":"modules/http.hh.js","pos":2142},"%tag":"hop","apply":function (){self=undefined;
}
}),$$hiphop.EXEC({"%location":{"filename":"modules/http.hh.js","pos":2155},"%tag":"async","response":"","apply":function (){const pulse=this.pulse;
{function run(request){const proto=((((request.protocol === "https:")) ? (https) : (http)));
req=proto.request(request,((res) => {res.content="";
if( res.statusCode === 200) {const contentLength=res.rawHeaders?.contentLength ?? Number.MAX_SAFE_INTEGER;
res.on("data",((d) => {res.content+=d.toString();
self.react({[pulse.signame]:res});
if( res.content.length >= contentLength) {self.notify(res);
ended=true;
req=false;
state="complete";
}else {}
}));
res.on("end",(() => {if( state === "active") {state="complete";
self.notify(res);
} else {ended=true;
req=false;
}}));
} else {self.notify(res);
}}));
if( typeof (payload) !== "undefined") {req.write(payload);
}else {}
req.on("error",((error) => {if( state === "active") {self.notify("error");
}else {}
}));
req.end();
}
self=this;
let request;
let options;
switch(typeof requestOrUrl) {case "string": {request=parse(requestOrUrl);
break;
}
case "object": {request=requestOrUrl;
break;
}
default: {throw ("httpRequest, bad requestOrUrl argument \"")+(requestOrUrl)+("\"");
}
}switch(typeof optionsOrPayload) {case "object": {options=optionsOrPayload;
break;
}
case "string": {options={};
payload=optionsOrPayload;
break;
}
case "function": {options=optionsOrPayload();
break;
}
case "undefined": {options={};
break;
}
default: {throw ("httpRequest, bad optionsOrPayload argument \"")+(optionsOrPayload)+("\"");
}
}switch(typeof payload) {case "string": {if( typeof payload !== "undefined") {throw ("httpRequest, bad options/payload arguments \"")+(optionsOrPayload)+("/")+(payload)+("\"");
}else {}
}
case "function": {if( typeof payload !== "undefined") {throw ("httpRequest, bad options/payload arguments \"")+(optionsOrPayload)+("/")+(payload)+("\"");
} else {payload=payload();
}break;
}
case "undefined": {break;
}
default: {throw ("httpRequest, bad payload argument \"")+(payload)+("\"");
}
}run(request);
}}
,"suspApply":function (){state="suspend";
}
,"resApply":function (){if( ended) {self.notify(res);
} else {state="active";
}}
,"killApply":function (){if( req) {req.destroy();
req=false;
state="dead";
}else {}
}
},$$hiphop.SIGACCESS({"signame":"pulse","pre":false,"val":false,"cnt":false})));
}
)());
}
)());
}
)());
}
)());
}
,"%location":{"filename":"modules/http.hh.js","pos":1611},"%tag":"module"}));

//# sourceMappingURL=modules/http.js.map
