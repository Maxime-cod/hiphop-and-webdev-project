;*=====================================================================*/
;*    serrano/prgm/project/hiphop/1.3.x/preprocessor/_hhaccess.hop     */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Tue Nov 13 10:52:14 2018                          */
;*    Last change :  Mon Nov 20 17:27:06 2023 (serrano)                */
;*    Copyright   :  2018-23 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    Patching the AST built by the native parser                      */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _astaccess
   
   (library hopscript hop hopwidget nodejs js2scheme)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))
	   
;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this scope module)
   (js-put! module (& "exports")
      (js-make-function %this
	 (lambda (this node iscnt hhname accessors)
	    (let* ((venv (collect-var* node))
		   (lenv (collect-let* (list node)))
		   (axs (collect-accessor* node (append venv lenv))))
	       (cond
		  ((null? axs)
		   node)
		  ((isa? node J2SExpr)
		   (with-access::J2SExpr node (loc)
		      (let* ((ret (instantiate::J2SReturn
				     (loc loc)
				     (expr node)))
			     (be (instantiate::J2SBindExit
				    (loc loc)
				    (lbl #f)
				    (stmt (node->accessors
					     ret
					     axs iscnt hhname accessors %this)))))
			 (with-access::J2SReturn ret (from)
			    (set! from be)
			    be))))
		  (else
		   (node->accessors node axs iscnt hhname accessors %this)))))
	 (js-function-arity 4 0)
	 (js-function-info :name "exports" :len 4))
      #f %this))

;*---------------------------------------------------------------------*/
;*    reserved ...                                                     */
;*---------------------------------------------------------------------*/
(define reserved '(Date))

;*---------------------------------------------------------------------*/
;*    node->accessors ...                                              */
;*---------------------------------------------------------------------*/
(define (node->accessors node axs iscnt hhname accessors %this)

   (define (this-accessor loc field)
      (instantiate::J2SAccess
	 (loc loc)
	 (obj (instantiate::J2SUnresolvedRef
		 (loc loc)
		 (id 'this)))
	 (field field)))

   (define (sigaccess loc name pre val)
      (let ((attr (instantiate::J2SObjInit
		     (loc loc)
		     (inits (list
			       (instantiate::J2SDataPropertyInit
				  (loc loc)
				  (name (instantiate::J2SString
					   (loc loc)
					   (val "signame")))
				  (val (instantiate::J2SString
					  (loc loc)
					  (val name))))
			       (instantiate::J2SDataPropertyInit
				  (loc loc)
				  (name (instantiate::J2SString
					   (loc loc)
					   (val "pre")))
				  (val (instantiate::J2SBool
					  (loc loc)
					  (val pre))))
			       (instantiate::J2SDataPropertyInit
				  (loc loc)
				  (name (instantiate::J2SString
					   (loc loc)
					   (val "val")))
				  (val (instantiate::J2SBool
					  (loc loc)
					  (val val))))
			       (instantiate::J2SDataPropertyInit
				  (loc loc)
				  (name (instantiate::J2SString
					   (loc loc)
					   (val "cnt")))
				  (val (instantiate::J2SBool
					  (loc loc)
					  (val iscnt)))))))))
	 (instantiate::J2SCall
	    (loc loc)
	    (thisargs '())
	    (fun (instantiate::J2SAccess
		    (loc loc)
		    (obj (instantiate::J2SUnresolvedRef
				    (loc loc)
				    (id '$$hiphop)))
		    (field (instantiate::J2SString
			      (loc loc)
			      (val "SIGACCESS")))))
	    (args (list attr)))))
   
   (define (accessor loc obj field)
      (with-access::J2SUnresolvedRef obj (id)
	 (with-access::J2SString field (val)
	    (cond
	       ((string=? val "signame")
		(sigaccess loc (symbol->string id) #f #f))
	       ((string=? val "now")
		(sigaccess loc (symbol->string id) #f #f))
	       ((string=? val "nowval")
		(sigaccess loc (symbol->string id) #f #t))
	       ((string=? val "pre")
		(sigaccess loc (symbol->string id) #t #f))
	       ((string=? val "preval")
		(sigaccess loc (symbol->string id) #t #t))
	       (else
		(error "hiphop" "illegal accessor" val))))))

   (define (access->general-decl ax::J2SAccess)
      ;; for an access sig.{now,nowval,pre,preval}, this creates
      ;; a new variable named after sig and initialized with a dummy
      ;; empty and sealed object
      (if (>=fx (bigloo-debug) 1)
	  ;; debug mode don't assume anything about types
	  (with-access::J2SAccess ax (loc obj field)
	     (js-array-push accessors (accessor loc obj field) %this #f)
	     (with-access::J2SUnresolvedRef obj (id)
		(instantiate::J2SDeclInit
		   (loc loc)
		   (id id)
		   (writable #f)
		   (vtype 'any)
		   (binder 'let-opt)
		   (scope 'letblock)
		   (val (instantiate::J2SAccess
			   (loc loc)
			   (obj (instantiate::J2SUnresolvedRef
				   (loc loc)
				   (id 'this)))
			   (field (instantiate::J2SString
				     (loc loc)
				     (val (symbol->string id)))))))))
	  (with-access::J2SAccess ax (loc obj field)
	     (js-array-push accessors (accessor loc obj field) %this #f)
	     (with-access::J2SUnresolvedRef obj (id)
		(instantiate::J2SDeclInit
		   (loc loc)
		   (id id)
		   (writable #f)
		   (vtype 'object)
		   (binder 'let-opt)
		   (scope 'letblock)
		   (val (instantiate::J2SCast
			   (loc loc)
			   (type 'object)
			   (static #t)
			   (expr (instantiate::J2SAccess
				    (loc loc)
				    (obj (instantiate::J2SUnresolvedRef
					    (loc loc)
					    (id 'this)))
				    (field (instantiate::J2SString
					      (loc loc)
					      (val (symbol->string id)))))))))))))
   
   (with-access::J2SNode node (loc)
      (if (pair? axs)
	  (instantiate::J2SLetBlock
	     (loc loc)
	     (endloc loc)
	     (rec #f)
	     (decls (map access->general-decl
		       (delete-duplicates axs
			  (lambda (a1 a2)
			     (with-access::J2SAccess a1 ((o1 obj))
				(with-access::J2SUnresolvedRef o1 ((id1 id))
				   (with-access::J2SAccess a2 ((o2 obj))
				      (with-access::J2SUnresolvedRef o2 ((id2 id))
					 (eq? id1 id2)))))))))
	     (mode 'hopscript)
	     (nodes (list node)))
	  (instantiate::J2SBlock
	     (loc loc)
	     (endloc loc)
	     (nodes (list node))))))

;*---------------------------------------------------------------------*/
;*    find-decl ...                                                    */
;*---------------------------------------------------------------------*/
(define (find-decl ref::J2SUnresolvedRef env::pair-nil)
   (with-access::J2SUnresolvedRef ref ((var id))
      (find (lambda (decl)
	       (with-access::J2SDecl decl (id)
		  (eq? id var)))
	 env)))

;*---------------------------------------------------------------------*/
;*    collect-accessor* ...                                            */
;*---------------------------------------------------------------------*/
(define-generic (collect-accessor* this::obj env)
   (if (pair? this)
       (append-map (lambda (n) (collect-accessor* n env)) this)
       '()))

;*---------------------------------------------------------------------*/
;*    collect-accessor* ::J2SNode ...                                  */
;*---------------------------------------------------------------------*/
(define-method (collect-accessor* this::J2SNode env)
   (let ((fields (class-all-fields (object-class this))))
      (let loop ((i (-fx (vector-length fields) 1))
		 (axs '()))
	 (if (=fx i -1)
	     axs
	     (let* ((f (vector-ref fields i))
		    (info (class-field-info f)))
		(loop (-fx i 1)
		   (if (and (pair? info) (member "ast" info))
		       (append (collect-accessor*
				  ((class-field-accessor f) this) env)
			  axs)
		       axs)))))))

;*---------------------------------------------------------------------*/
;*    collect-accessor* ::J2SAccess ...                                */
;*---------------------------------------------------------------------*/
(define-method (collect-accessor* this::J2SAccess env)
   (with-access::J2SAccess this (obj field)
      (let ((axobj (collect-accessor* obj env))
	    (axfd (collect-accessor* field env)))
	 (if (and (isa? obj J2SUnresolvedRef)
		  (isa? field J2SString)
		  (not (find-decl obj env)))
	     (with-access::J2SUnresolvedRef obj (id)
		(with-access::J2SString field (val)
		   (if (and (or (string=? val "signame")
				(string=? val "now")
				(string=? val "nowval")
				(string=? val "pre")
				(string=? val "preval"))
			    (not (memq id reserved)))
		       (cons this (append axobj axfd))
		       (append axobj axfd))))
	     (append axobj axfd)))))

;*---------------------------------------------------------------------*/
;*    collect-accessor* ::J2SFun ...                                   */
;*---------------------------------------------------------------------*/
(define-method (collect-accessor* this::J2SFun env)
   (with-access::J2SFun this (body params thisp decl loc)
      (let* ((env0 (if (j2sfun-expression? this) (cons decl env) env))
	     (decls (collect-var* body))
	     (envl (append decls params))
	     (env1 (append envl env0))
	     (ldecls (with-access::J2SBlock body (nodes)
			(collect-let* nodes)))
	     (arguments (instantiate::J2SDecl
			   (id 'arguments)
			   (utype 'any)
			   (loc loc)))
	     (nenv (cons arguments (append ldecls env1)))
	     (bdenv (if (isa? thisp J2SDecl) (cons thisp nenv) nenv)))
	 (collect-accessor* body bdenv))))
      
;*---------------------------------------------------------------------*/
;*    collect-let* ...                                                 */
;*---------------------------------------------------------------------*/
(define (collect-let*::pair-nil nodes::pair-nil)
   (append-map (lambda (d)
		  (if (isa? d J2SVarDecls)
		      (with-access::J2SVarDecls d (decls)
			 (filter (lambda (d::J2SDecl)
				    (when (j2s-let? d)
				       (with-access::J2SDecl d (scope)
					  (unless (eq? d 'loop)
					     d))))
			    decls))
		      '()))
      nodes))

;*---------------------------------------------------------------------*/
;*    collect-var* ::J2SNode ...                                       */
;*    -------------------------------------------------------------    */
;*    Collect all the variables declared in a tree.                    */
;*---------------------------------------------------------------------*/
(define-generic (collect-var* this::obj)
   (if (pair? this)
       (append-map (lambda (n) (collect-var* n)) this)
       '()))

;*---------------------------------------------------------------------*/
;*    collect-var* ::J2SNode ...                                       */
;*---------------------------------------------------------------------*/
(define-method (collect-var* this::J2SNode)
   (let ((fields (class-all-fields (object-class this))))
      (let loop ((i (-fx (vector-length fields) 1))
		 (ds '()))
	 (if (=fx i -1)
	     ds
	     (let* ((f (vector-ref fields i))
		    (info (class-field-info f)))
		(loop (-fx i 1)
		   (if (and (pair? info) (member "ast" info))
		       (append (collect-var* ((class-field-accessor f) this)) ds)
		       ds)))))))

;*---------------------------------------------------------------------*/
;*    collect-var* ::J2SVarDecls ...                                   */
;*---------------------------------------------------------------------*/
(define-method (collect-var* this::J2SVarDecls)
   (with-access::J2SVarDecls this (decls)
      (filter (lambda (d::J2SDecl)
		 (not (j2s-let? d)))
	 decls)))

;*---------------------------------------------------------------------*/
;*    collect-var* ::J2SDecl ...                                       */
;*---------------------------------------------------------------------*/
(define-method (collect-var* this::J2SDecl)
   (if (j2s-var? this) (list this) '()))

;*---------------------------------------------------------------------*/
;*    collect-var* ::J2SDeclFun ...                                    */
;*---------------------------------------------------------------------*/
(define-method (collect-var* this::J2SDeclFun)
   (list this))

;*---------------------------------------------------------------------*/
;*    collect-var* ::J2SDeclExtern ...                                 */
;*---------------------------------------------------------------------*/
(define-method (collect-var* this::J2SDeclExtern)
   (list this))

;*---------------------------------------------------------------------*/
;*    collect-var* ::J2SFun ...                                        */
;*---------------------------------------------------------------------*/
(define-method (collect-var* this::J2SFun)
   '())

;*---------------------------------------------------------------------*/
;*    collect-var* ::J2SDollar ...                                     */
;*---------------------------------------------------------------------*/
(define-method (collect-var* this::J2SDollar)
   '())
