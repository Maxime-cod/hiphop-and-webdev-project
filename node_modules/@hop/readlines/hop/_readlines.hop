;*=====================================================================*/
;*    .../hop/hop/node_modules/readlines/hop/_readlines.hop            */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Thu Mar  9 14:57:50 2023                          */
;*    Last change :  Mon Jun  3 10:35:39 2024 (serrano)                */
;*    Copyright   :  2023-24 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    Hop readlines implementation.                                    */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _readlines

   (library hopscript hop nodejs)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

;*---------------------------------------------------------------------*/
;*    read-lines-all ...                                               */
;*---------------------------------------------------------------------*/
(define (read-lines-all ip)
   (let loop ((ls '()))
      (let ((l (read-line ip)))
	 (if (eof-object? l)
	     (reverse! ls)
	     (loop (cons (js-string->jsstring l) ls))))))

;*---------------------------------------------------------------------*/
;*    read-lines-cb ...                                                */
;*---------------------------------------------------------------------*/
(define (read-lines-cb ip proc)
   (let loop ()
      (let ((l (read-line ip)))
	 (unless (eof-object? l)
	    (proc (js-undefined) (js-string->jsstring l))
	    (loop)))))

;*---------------------------------------------------------------------*/
;*    js-readlines-generator ...                                       */
;*---------------------------------------------------------------------*/
(define (js-readlines-generator %v %e %gen %yield %this)
   
   (define (kwhile %gen %yield::obj %this::obj)
      (let* ((ip (js-generator-ref %gen 0 "ip"))
	     (l (read-line ip)))
	 (if (eof-object? l)
	     (begin
		(close-input-port ip)
		(js-generator-yield %gen %yield
		   (js-undefined)
		   #t
		   js-generator-done
		   %this))
	     (js-generator-yield %gen %yield
		(js-string->jsstring l)
		#f
		(lambda (%arg1342 %exn1343 %gen %yield %this)
		   (if (eq? %exn1343 #t)
		       (js-throw %arg1342 (js-string->jsstring "readline.js") 16)
		       (kwhile %gen %yield %this)))
		%this))))

   (kwhile %gen %yield %this))

;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this %scope %module)
   
   (js-export (readLines readLinesGen)
      
      (define (js-readlines this fd cb)
	 (let ((p (open-input-descriptor fd)))
	    (unwind-protect
	       (if (js-callable? cb)
		   ;; read the lines one by one
		   (let ((proc (if (not (js-procedure? cb))
				   (lambda (this obj)
				      (js-call1 %this cb this obj))
				   (with-access::JsProcedure cb (procedure arity)
				      (if (=fx arity 1)
					  procedure
					  (lambda (this obj)
					     (js-call1% %this cb procedure
						this obj)))))))
		      (read-lines-cb p proc))
		   (js-vector->jsarray (list->vector (read-lines-all p)) %this))
	       (close-input-port p))))

      (define js-prototype-readlines-gen
	 (with-access::JsGlobalObject %this (js-generator-prototype)
	    (instantiateJsObject
	       (__proto__ js-generator-prototype)
	       (elements ($create-vector 1)))))
      
      (define (js-readlines-gen this::obj fd)
	 (let ((ip (open-input-descriptor fd))
	       (%gen (js-make-generator 1 js-readlines-generator
			js-prototype-readlines-gen
			%this)))
	    (js-generator-set! %gen 0 ip "ip")
	    %gen))
      
      ;; readLines
      (define readLines
	 (js-make-function %this
	    js-readlines
	    (js-function-arity 2 0)
	    (js-function-info :name "readLines" :len 1)
	    :size 2))
      
      ;; readLinesGen
      (define readLinesGen
	 (js-make-function %this
	    js-readlines-gen
	    (js-function-arity 1 0)
	    (js-function-info :name "readLinesGen" :len 1)
	    :prototype
	    js-prototype-readlines-gen
	    :__proto__
	    (with-access::JsGlobalObject %this (js-generatorfunction-prototype)
	       js-generatorfunction-prototype)))
      
      readLines))
