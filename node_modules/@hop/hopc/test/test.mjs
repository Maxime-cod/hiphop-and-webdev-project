/*=====================================================================*/
/*    serrano/prgm/project/hop/hop/node_modules/hopc/test/test.mjs     */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Thu Nov 16 10:44:53 2023                          */
/*    Last change :  Thu May 16 20:06:25 2024 (serrano)                */
/*    Copyright   :  2023-24 Manuel Serrano                            */
/*    -------------------------------------------------------------    */
/*    Testing the hopc package                                         */
/*=====================================================================*/
"use strict";

/*---------------------------------------------------------------------*/
/*    import                                                           */
/*---------------------------------------------------------------------*/
import * as assert from "assert";
import { Parser, ast, generate } from "@hop/hopc";

describe('hop()', function () {
   const parser = new Parser();
   const parseString = parser.parseString.bind(parser);
   
   it('parse boolean', function () {
      assert.equal(parseString("true;").generate(), "true;");
   });
   it('parse number', function () {
      assert.equal(parseString("1234;").generate(), "1234;");
   });
   it('parse hexa', function () {
      assert.equal(parseString("0xf1234;").generate(), "0xf1234;");
   });
   it('parse float', function () {
      assert.equal(parseString("1234.53;").generate(), "1234.53;");
   });
   it('parse bigint', function () {
      assert.equal(parseString("1234n;").generate(), "1234n;");
   });
   it('parse expression', function () {
      assert.equal(parseString("1+x;").generate(), "1+x;");
   });
   it('parse expression', function () {
      assert.equal(parseString("1+x.length+'foo'.length;").generate(), "1+x.length+\"foo\".length;");
   });
   it('parse chaining', function () {
      assert.equal(parseString("y?.z;").generate(), "y?.z;");
   });
   it('export', function () {
      assert.equal(parseString("export const x = 3;").generate(), "export { x };const x = 3;");
   });
   it('logical or', function () {
      assert.equal(parseString("x ||= 3;").generate(), "x ||= 3");
   });
   it('logical and', function () {
      assert.equal(parseString("x &&= {};").generate(), "x &&= {}");
   });
   it('nullish', function () {
      assert.equal(parseString("x ??= 7.8;").generate(), "x ??= 7.8");
   });
});
