/*=====================================================================*/
/*    .../prgm/project/hop/hop/node_modules/hopc/node/reader.mjs       */
/*    -------------------------------------------------------------    */
/*    Author      :  manuel serrano                                    */
/*    Creation    :  Sat Sep 16 12:17:54 2023                          */
/*    Last change :  Mon May  6 07:33:37 2024 (serrano)                */
/*    Copyright   :  2023-24 manuel serrano                            */
/*    -------------------------------------------------------------    */
/*    reader                                                           */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    location ...                                                     */
/*    -------------------------------------------------------------    */
/*    Source file locations                                            */
/*---------------------------------------------------------------------*/
/* @sealed */
export class Location {
   filename;
   offset;

   constructor(filename, offset) {
      this.filename = filename;
      this.offset = offset;
   }
}

/*---------------------------------------------------------------------*/
/*    makeLoc ...                                                      */
/*---------------------------------------------------------------------*/
export function makeLoc(filename, offset) {
   return new Location(filename, offset);
}

/*---------------------------------------------------------------------*/
/*    makePortLoc ...                                                  */
/*---------------------------------------------------------------------*/
export function makePortLoc(port) {
   return new Location(port.filename, port.offset + port.shiftOffset);
}

/*---------------------------------------------------------------------*/
/*    locFile ...                                                      */
/*---------------------------------------------------------------------*/
export function locFilename(loc) {
   return loc.filename;
}

/*---------------------------------------------------------------------*/
/*    locOffset ...                                                    */
/*---------------------------------------------------------------------*/
export function locOffset(loc) {
   return loc.offset;
}

/*---------------------------------------------------------------------*/
/*    lexer ...                                                        */
/*---------------------------------------------------------------------*/
/* @sealed */
export class Lexer {
   #rules;

   constructor(rules) {
      this.#rules = rules;
   }

   eof(port) {
      return undefined;
   }

   error(port) {
      return {
	 msg: `${this.constructor.name} unexpected input "${port.buffer.substring(port.offset, port.offset + 20)}..."`,
	 location: makePortLoc(port)
      }
   }

   match(port, val, rule) {
      port.offset += val.length;
      return { res: val, ignore: false };
   }
   
   reader(port, ...opts) {
      while (true) {
	 if (port.buffer.length <= port.offset) {
	    return this.eof(port, ...opts);
	 } else {
	    let len = -1;
	    let lix = -1;
	    const offset = port.offset;

	    const m = this.#rules.map((ru, idx, _) => {
	       const li = ru.rx.lastIndex;
	       ru.rx.lastIndex = offset;
	       const sm = port.buffer.match(ru.rx);
	       ru.rx.lastIndex = li;
	       if (sm && sm[0].length > len) {
		  len = sm[0].length;
		  lix = idx;
		  return sm[0];
	       }
	    });

	    if (lix === -1) {
               throw this.error(port, ...opts);
	    } else {
	       const val = m[lix];
	       const { res, ignore } = this.match(port, val, this.#rules[lix], ...opts);
	       if (ignore) {
		  continue;
	       } else {
		  return res;
	       }
	    }
	 }
      }
   }
}

/*---------------------------------------------------------------------*/
/*    read_rp ...                                                      */
/*---------------------------------------------------------------------*/
export function read_rp(lexer, port, ...opts) {
   const tok = lexer.reader(port, opts);
   //console.error("tok=", tok);
   return tok;
}

/*---------------------------------------------------------------------*/
/*    readLine ...                                                     */
/*---------------------------------------------------------------------*/
export function readLine(port) {
   const buffer = port.buffer;   
   if (buffer.length <= port.offset) {
      return undefined;
   } else {
      const e = buffer.indexOf("\n", port.offset);
      if (e) {
	 return buffer.substring(port.offset, e);
      } else {
	 return buffer.substring(port.offset);
      }
   }
}


