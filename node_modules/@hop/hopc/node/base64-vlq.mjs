/*=====================================================================*/
/*    .../project/hop/hop/node_modules/hopc/node/base64-vlq.mjs        */
/*    -------------------------------------------------------------    */
/*    Author      :  manuel serrano                                    */
/*    Creation    :  Fri Nov 24 14:26:05 2023                          */
/*    Last change :  Mon Feb 19 12:08:47 2024 (serrano)                */
/*    Copyright   :  2023-24 manuel serrano                            */
/*    -------------------------------------------------------------    */
/*    base64-vlq encoding                                              */
/*    -------------------------------------------------------------    */
/*    This code is largely adapted from a Mozilla library which        */
/*    implements the base64-vlq encoding/decoding in JavaScript.       */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    exports                                                          */
/*---------------------------------------------------------------------*/
export { decode, encode };

/*---------------------------------------------------------------------*/
/*    vlqBaseShift ...                                                 */
/*    -------------------------------------------------------------    */
/*    A single base 64 digit can contain 6 bits of data. For the base  */
/*    64 variable length quantities we use in the source map spec, the */
/*    first bit is the sign, the next four bits are the actual value,  */
/*    and the 6th bit is the continuation bit. The continuation bit    */
/*    tells us whether there are more digits in this value following   */
/*    this digit.                                                      */
/*                                                                     */
/*       Continuation                                                  */
/*       |    Sign                                                     */
/*       |    |                                                        */
/*       V    V                                                        */
/*       101011                                                        */
/*---------------------------------------------------------------------*/
const vlqBaseShift = 5;

/*---------------------------------------------------------------------*/
/*    vlqBase ...                                                      */
/*    -------------------------------------------------------------    */
/*    binary: 1000000                                                  */
/*---------------------------------------------------------------------*/
const vlqBase = 1 << vlqBaseShift;

/*---------------------------------------------------------------------*/
/*    vlqBaseMask ...                                                  */
/*    -------------------------------------------------------------    */
/*    binary: 0111111                                                  */
/*---------------------------------------------------------------------*/
const vlqBaseMask = vlqBase - 1;

/*---------------------------------------------------------------------*/
/*    vlqContinuationBit ...                                           */
/*---------------------------------------------------------------------*/
const vlqContinuationBit = vlqBase;

/*---------------------------------------------------------------------*/
/*    decodeChars ...                                                  */
/*---------------------------------------------------------------------*/
const decodeChars = new Array(256).fill(-1);
for (let i = "A".charCodeAt(0); i <= "Z".charCodeAt(0); i++) {
   decodeChars[i] = i - "A".charCodeAt(0);
}
for (let i = "a".charCodeAt(0); i <= "z".charCodeAt(0); i++) {
   decodeChars[i] = 26 + (i - "a".charCodeAt(0));
}
for (let i = "0".charCodeAt(0); i <= "9".charCodeAt(0); i++) {
   decodeChars[i] = 52 + (i - "0".charCodeAt(0));
}
decodeChars["+".charCodeAt(0)] = 62;
decodeChars["/".charCodeAt(0)] = 63;

/*---------------------------------------------------------------------*/
/*    base64DecodeChar ...                                             */
/*---------------------------------------------------------------------*/
function base64DecodeChar(char) {
   const c = char.charCodeAt(0);
   if (c < 0) {
      throw "base64DecodeChar:illegal character " + c;
   } else {
      return decodeChars[c];
   }
}

/*---------------------------------------------------------------------*/
/*    encodeChars                                                      */
/*---------------------------------------------------------------------*/
const encodeChars = new Array(64).fill(" ");
for (let i = 0; i < 26; i++) {
   encodeChars[i] = String.fromCharCode(i + "A".charCodeAt(0));
   encodeChars[26 + i] = String.fromCharCode(i + "a".charCodeAt(0));
}
for (let i = 0; i < 10; i++) {
   encodeChars[i + 52] = String.fromCharCode(i + "0".charCodeAt(0));
}
encodeChars[62] = "+";
encodeChars[63] = "/";

/*---------------------------------------------------------------------*/
/*    base64EncodeChar ...                                             */
/*---------------------------------------------------------------------*/
function base64EncodeChar(num) {
   if (num < 0 || num > 63) {
      throw "base64EncodeChar:illegal character " + nu;
   } else {
      return encodeChars[num];
   }
}

/*---------------------------------------------------------------------*/
/*    decode ...                                                       */
/*---------------------------------------------------------------------*/
function decode(str, index = 0) {

   function fromVlqSigned(val) {
      // Converts to a two-complement value from a value where the sign
      // bit is is placed in the least significant bit.
      // For example, as decimals:
      //    2 (10 binary) becomes 1, 3 (11 binary) becomes -1
      //    4 (100 binary) becomes 2, 5 (101 binary) becomes -2
      const shifted = val >> 1;
      return ((val & 1) === 1) ? -shifted : shifted;
   }

   const len = str.length;
   let result = 0;
   let shift = 0;

   for (let i = index; i < len; i++) {
      const digit = base64DecodeChar(str[i]);
      result += (digit & vlqBaseMask) << shift;
      if ((digit & vlqContinuationBit) === vlqContinuationBit) {
	 shift += vlqBaseShift;
      } else {
	 return { value: fromVlqSigned(result), index: i + 1 };
      }
   }

   throw "Base64VlqDecode: Expected more digits in base 64 VLQ value @" + index;
}

/*---------------------------------------------------------------------*/
/*    encode ...                                                       */
/*---------------------------------------------------------------------*/
function encode(val) {

   function toVlqSigned (val) {
      // Converts from a two-complement value to a value where the sign
      // bit is is placed in the least significant bit.
      // For example, as decimals:
      //   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
      //   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
      if (val < 0) {
	 return (-val << 1) + 1;
      } else {
	 return val << 1;
      }
   }

   for (let vlq = toVlqSigned(val), encoded = ""; vlq >= 0; ) {
      const digit = (vlq & vlqBaseMask)
      vlq >>>= vlqBaseShift;

      if (vlq > 0) {
	 encoded += base64EncodeChar(digit | vlqContinuationBit);
      } else {
	 return encoded + base64EncodeChar(digit);
      }
   }
}

/*---------------------------------------------------------------------*/
/*    testing                                                          */
/*---------------------------------------------------------------------*/
/* console.log('1-----');                                              */
/* console.log(base64VlqEncode(-3433));                                */
/* console.log('2-----');                                              */
/* console.log(base64VlqEncode(-108));                                 */
/* console.log('3-----');                                              */
/* console.log(base64VlqEncode(0));                                    */
/* console.log('4-----');                                              */
/* console.log(base64VlqEncode(1));                                    */
/* console.log('4-----');                                              */
/* console.log(base64VlqEncode(18));                                   */
/* console.log('5-----');                                              */
/* console.log(base64VlqEncode(322));                                  */
/* console.log('6-----');                                              */
/* console.log(base64VlqEncode(98724));                                */
/* console.log('7-----');                                              */
/* console.log(base64VlqEncode(16));                                   */
/* 	                                                               */
/* for( var i = -100; i < 100; i++ ) {                                 */
/*   console.log("i=" + i + " -> " + base64VlqEncode(i));              */
/* }                                                                   */

/* function dec(s, index = 0) {                                        */
/*    var { value, index } = base64VlqDecode(s, index);                */
/*    console.log('s=[' + s + '] -> val=' + value);                    */
/*    if (index < s.length) {                                          */
/*       dec(s, index);                                                */
/*    }                                                                */
/* }                                                                   */
/*                                                                     */
/* console.log('1-----');                                              */
/* dec('QAG5C');                                                       */
/* console.log('2-----');                                              */
/* dec('AAgBC');                                                       */
/* console.log('3-----');                                              */
/* dec('0BAAA');                                                       */
/* console.log('4-----');                                              */
/* dec('CAAiCC');                                                      */
/* console.log('5-----');                                              */
/* dec('gCACjC');                                                      */
/* console.log('6-----');                                              */
/* dec('KAAAC');                                                       */
/* console.log('7-----');                                              */
/* dec('OAAY');                                                        */
