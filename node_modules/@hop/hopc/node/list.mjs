/*=====================================================================*/
/*    serrano/prgm/project/hop/hop/node_modules/hopc/node/list.mjs     */
/*    -------------------------------------------------------------    */
/*    Author      :  manuel serrano                                    */
/*    Creation    :  Sat Sep 16 17:06:56 2023                          */
/*    Last change :  Thu Jun  6 08:29:20 2024 (serrano)                */
/*    Copyright   :  2023-24 manuel serrano                            */
/*    -------------------------------------------------------------    */
/*    List implementation                                              */
/*=====================================================================*/
"use strict";

/*---------------------------------------------------------------------*/
/*    Cons ...                                                         */
/*---------------------------------------------------------------------*/
function Cons(a, d) {
   this.car = a;
   this.cdr = d;
}

/*---------------------------------------------------------------------*/
/*    list2array ...                                                   */
/*---------------------------------------------------------------------*/
export function list2array(lst) {
   let res = [];
   while (!nullp(lst)) {
      res.push(car(lst));
      lst = cdr(lst);
   }
   return res;
}

/*---------------------------------------------------------------------*/
/*    array2list ...                                                   */
/*---------------------------------------------------------------------*/
export function array2list(arr) {
   if (!arr) {
      return arr;
   } else {
      let res = null;
      for (let i = arr.length - 1; i >=0; i--) {
	 res = cons(arr[i], res);
      }
      return res;
   }
}

/*---------------------------------------------------------------------*/
/*    cons ...                                                         */
/*---------------------------------------------------------------------*/
export function cons(a, d) {
   return new Cons(a, d);
}

/*---------------------------------------------------------------------*/
/*    cons_ ...                                                        */
/*---------------------------------------------------------------------*/
export function cons_(a, d, list) {
   return cons(a, cons(d, list));
}

/*---------------------------------------------------------------------*/
/*    list ...                                                         */
/*---------------------------------------------------------------------*/
export function list(...o) {
   let l = null;

   for (let i = o.length - 1; i >= 0; i--) {
      l = cons(o[i], l);
   }

   return l;
}

/*---------------------------------------------------------------------*/
/*    nullp ...                                                        */
/*---------------------------------------------------------------------*/
export function nullp(o) {
   return o === null;
}

/*---------------------------------------------------------------------*/
/*    pairp ...                                                        */
/*---------------------------------------------------------------------*/
export function pairp(o) {
   return o instanceof Cons;
}

/*---------------------------------------------------------------------*/
/*    car & cdr ...                                                    */
/*---------------------------------------------------------------------*/
export function car(o) {
   return o.car;
}

export function cdr(o) {
   return o.cdr;
}

export function setCar(o, v) {
   return o.car = v;
}

export function setCdr(o, v) {
   return o.cdr = v;
}

export function cadr(o) {
   return o.cdr.car;
}

/*---------------------------------------------------------------------*/
/*    lastPair ...                                                     */
/*---------------------------------------------------------------------*/
export function lastPair(o) {
   if (!pairp(o)) {
      throw new TypeError(`"not a pair: ${o.constructor.name} [${o}]`);
   } else {
      while (o.cdr !== null) {
	 o = o.cdr;
      }
      return o;
   }
}

/*---------------------------------------------------------------------*/
/*    length ...                                                       */
/*---------------------------------------------------------------------*/
export function length(lst) {
   let res = 0;
   while (!nullp(lst)) {
      res++;
      lst = cdr(lst);
   }
   return res;
}

/*---------------------------------------------------------------------*/
/*    reverse ...                                                      */
/*---------------------------------------------------------------------*/
export const reverse = p => {
   let acc = null;

   while (p !== null) {
      acc = cons(car(p), acc);
      p = cdr(p);
   }

   return acc;
}

/*---------------------------------------------------------------------*/
/*    reverse$ ...                                                     */
/*---------------------------------------------------------------------*/
export const reverse$ = p => {
   return reverse(p);
}

/*---------------------------------------------------------------------*/
/*    append ...                                                       */
/*---------------------------------------------------------------------*/
export const append = (l1, l2) => {
   let head = cons(null, l2);

   const loop = (prev, tail) => {
      if (tail === null) {
	 return null;
      } else {
	 const newPrev = cons(car(tail), l2);
	 setCdr(prev, newPrev);
	 return loop(newPrev, cdr(tail));
      }
   }

   loop(head, l1);
   return cdr(head);
}

/*---------------------------------------------------------------------*/
/*    assq ...                                                         */
/*---------------------------------------------------------------------*/
export const assq = (k, l) => {
   while (l !== null) {
      let e = car(l);
      if (car(e) === k) {
	 return e;
      } else {
	 l = cdr(l);
      }
   }
   return false;
}
	 
/*---------------------------------------------------------------------*/
/*    forEach ...                                                      */
/*---------------------------------------------------------------------*/
export function forEach(f, lst) {
   while (!nullp(lst)) {
      f(car(lst));
      lst = cdr(lst);
   }
}

/*---------------------------------------------------------------------*/
/*    map ...                                                          */
/*---------------------------------------------------------------------*/
export function map(f, ...lists) {
   if (lists.length === 0) {
      return null;
   } else if (lists.length === 1) {
      return map2(f, lists[0]);
   } else {
      return mapN(f, lists);
   }
}

/*---------------------------------------------------------------------*/
/*    map2 ...                                                         */
/*---------------------------------------------------------------------*/
function map2(f, lst) {
   if (nullp(lst)) {
      return null;
   } else {
      return cons(f(car(lst)), map2(f, cdr(lst)));
   }
}

/*---------------------------------------------------------------------*/
/*    mapN ...                                                         */
/*---------------------------------------------------------------------*/
function mapN(f, lists) {
   if (nullp(lists[0])) {
      return null;
   } else {
      const e = f.apply(undefined, lists.map(car));
      return cons(e, mapN(f, lists.map(cdr)));
   }
}

/*---------------------------------------------------------------------*/
/*    map$ ...                                                         */
/*---------------------------------------------------------------------*/
export function map$(f, lst) {
   let l = lst;
   while (!nullp(l)) {
      setCar(l, f(car(l)));
      l = cdr(l);
   }
   return lst;
}
	
/*---------------------------------------------------------------------*/
/*    find ...                                                         */
/*---------------------------------------------------------------------*/
export function find(proc, lst) {
   while (!nullp(lst)) {
      if (proc(car(lst))) {
	 return car(lst);
      } else {
	 lst = cdr(lst);
      }
   }
   return false;
}

/*---------------------------------------------------------------------*/
/*    filter ...                                                       */
/*---------------------------------------------------------------------*/
export function filter(f, lst) {
   if (nullp(lst)) {
      return null;
   } else {
      if (f(car(lst))) {
	 return cons(car(lst), filter(f, cdr(lst)));
      } else {
	 return filter(f, cdr(lst));
      }
   }
}

/*---------------------------------------------------------------------*/
/*    filterMap ...                                                    */
/*---------------------------------------------------------------------*/
export function filterMap(f, lst) {
   if (nullp(lst)) {
      return null;
   } else {
      const v = f(car(lst));
      if (v) {
	 return cons(v, filterMap(f, cdr(lst)));
      } else {
	 return filterMap(f, cdr(lst));
      }
   }
}

/*---------------------------------------------------------------------*/
/*    appendMap ...                                                    */
/*---------------------------------------------------------------------*/
export function appendMap(f, lst) {
   if (nullp(lst)) {
      return null;
   } else {
      return append(f(car(lst)), appendMap(f, cdr(lst)));
   }
}

/*---------------------------------------------------------------------*/
/*    iota ...                                                         */
/*---------------------------------------------------------------------*/
export function iota(max) {
   let res = null;
   for (let i = max -1 ; i >= 0; i--) {
      res = cons(i, res);
   }
   return res;
}

/*---------------------------------------------------------------------*/
/*    any ...                                                          */
/*---------------------------------------------------------------------*/
export function any(f, lst) {
   while (!nullp(lst)) {
      if (f(car(lst))) {
	 return true;
      } else {
	 lst = cdr(lst);
      }
   }
   return false;
}
   
/*---------------------------------------------------------------------*/
/*    every ...                                                        */
/*---------------------------------------------------------------------*/
export function every(f, lst) {
   while (!nullp(lst)) {
      if (!f(car(lst))) {
	 return false;
      } else {
	 lst = cdr(lst);
      }
   }
   return true;
}
