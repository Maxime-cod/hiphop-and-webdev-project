/*=====================================================================*/
/*    .../prgm/project/hop/hop/node_modules/hopc/node/utils.mjs        */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Thu Dec  7 09:10:52 2023                          */
/*    Last change :  Mon Jun 17 08:42:01 2024 (serrano)                */
/*    Copyright   :  2023-24 Manuel Serrano                            */
/*    -------------------------------------------------------------    */
/*    Utility functions for the generated JavaScript parser            */
/*=====================================================================*/

/*---------------------------------------------------------------------*/
/*    The module                                                       */
/*---------------------------------------------------------------------*/
import { readFileSync } from "node:fs";

/*---------------------------------------------------------------------*/
/*    symbolp ...                                                      */
/*---------------------------------------------------------------------*/
export function symbolp(o) {
   return typeof(o) === "string";
}

export function symboltostring(x) {
   return x;
}

export function symboltostring$(x) {
   return x;
}

export function symbolAppend(x, y) {
   return x + y;
}

export function fileSeparator() {
   return "/";
}

export function makeFileName(base, file) {
   return base + "/" + file;
}

export function pwd() {
   return process.cwd();
}

export function fileNameCanonicalize$(path) {
   return path;
}

export function openInputFile(path) {
   return {
      filename: path,
      buffer: readFileSync(path).toString(),
      offset: 0,
      shiftOffset: 0
   };
}

export function openInputString(val) {
   const buffer = val.toString();
   return {
      filename: "string://" + buffer.replace(/\n/g, "\\n"),
      buffer,
      offset: 0,
      shiftOffset: 0
   };
}

export function inputPortName(inputPort) {
   return inputPort.filename;
}

export function inputPortPosition(inputPort) {
   return inputPort.offset;
}

export function format(fmt, ...args) {
   let fix = fmt.split("~");
   let res = fix[0];

   args.forEach((a, i) => {
      res += args[i].toString() + fix[i+1].substring(1);
   })

   return res;
}

/*---------------------------------------------------------------------*/
/*    memqArray ...                                                    */
/*---------------------------------------------------------------------*/
export function memqArray(obj, arr) {
   return arr && arr.indexOf(obj) >= 0;
}

/*---------------------------------------------------------------------*/
/*    substring ...                                                    */
/*---------------------------------------------------------------------*/
export function substring(s, offset, len) {
   return s.substring(offset, len);
}

/*---------------------------------------------------------------------*/
/*    stringPrefixp ...                                                */
/*---------------------------------------------------------------------*/
export function stringPrefixp(p, s) {
   return s.indexOf(p) === 0;
}

/*---------------------------------------------------------------------*/
/*    stringtosymbol ...                                               */
/*---------------------------------------------------------------------*/
export function stringtosymbol(s) {
   return s;
}

/*---------------------------------------------------------------------*/
/*    stringIndexRight ...                                             */
/*---------------------------------------------------------------------*/
export function stringIndexRight(s, char) {
   const i = s.lastIndexOf(char);
   if (i >= 0) {
      return i;
   } else {
      return false;
   }
}

/*---------------------------------------------------------------------*/
/*    stringUpcase ...                                                 */
/*---------------------------------------------------------------------*/
export function stringUpcase(s) {
   return s.toUpperCase();
}   

/*---------------------------------------------------------------------*/
/*    flonump ...                                                      */
/*---------------------------------------------------------------------*/
export function flonump(val) {
   return false;
}

/*---------------------------------------------------------------------*/
/*    bignump ...                                                      */
/*---------------------------------------------------------------------*/
export function bignump(val) {
   return false;
}

/*---------------------------------------------------------------------*/
/*    procedurep ...                                                   */
/*---------------------------------------------------------------------*/
export function procedurep(val) {
   return typeof val === "function";
}

/*---------------------------------------------------------------------*/
/*    fixnumtollong ...                                                */
/*---------------------------------------------------------------------*/
export function fixnumtollong(val) {
   return val;
}

/*---------------------------------------------------------------------*/
/*    declUsageHasp ...                                                */
/*---------------------------------------------------------------------*/
export function declUsageHasp(decl, keys) {
   
   function usage(keys) {
      // see j2sscheme/usage-bi.sch
      let u = 0;
      keys.forEach(k => {
	 switch(k) {
	    case "assig": u |= 1; break;
	    case "init": u |= 2; break;
	    case "new": u |= 4; break;
	    case "ref": u |= 8; break;
	    case "eval": u |= 16; break;
	    case "get": u |= 32; break;
	    case "set": u |= 64; break;
	    case "call": u |= 128; break;
	    case "delete": u |= 256; break;
	    case "instanceof": u |= 512; break;
	    case "uninit": u |= 1024; break;
	    case "rest": u |= 2048; break;
	    case "method": u |= 4096; break;
	    case "&ref": u |= 8192; break;
	    case "slice": u |= 16384; break;
	    case "length": u |= 32768; break;
	    case "getx": u |= 65536; break;
	    case "apply": u |= 131072; break;
	    case "spread": u |= 262144; break;
	    case "geti": u |= 524288; break;
 	    default: {
	       throw new Error(`usage: illegal key -- ${k}`);
	    }
	 }
      })
      return u;
   }
   
   return usage(keys) & decl.usage > 0;
}

/*---------------------------------------------------------------------*/
/*    gensymCnt ...                                                    */
/*---------------------------------------------------------------------*/
let gensymCnt = 0;

/*---------------------------------------------------------------------*/
/*    gensym ...                                                       */
/*---------------------------------------------------------------------*/
export function gensym() {
   return "g" + gensymCnt++;
}
