
/*---------------------------------------------------------------------*/
/*    Definitions to be concatenated to ast.mjs when generated.        */
/*---------------------------------------------------------------------*/
export { isNative, wrap } from "./_ast.hop";
import { registerWrapper } from "./_ast.hop";
import { pairp, forEach } from "./_list.hop";

/*---------------------------------------------------------------------*/
/*    toString ...                                                     */
/*---------------------------------------------------------------------*/
J2SNode.prototype.toString = function() {
   return `<${this.clazz}>`;
}

/*---------------------------------------------------------------------*/
/*    j2sLetp ...                                                      */
/*---------------------------------------------------------------------*/
export function j2sLetp(decl) {
   switch (decl.binder) {
      case "let":
      case "let-opt":
      case "let-forin":
	 return true;
      case "var":
      case "param":
      case "record":
      case "export":
	 return false;
      default:
	 throw `j2sLetp: wrong binder "${decl.binder}"`;
   }
}

/*---------------------------------------------------------------------*/
/*    j2sVarp ...                                                      */
/*---------------------------------------------------------------------*/
export function j2sVarp(decl) {
   switch (decl.binder) {
      case "var":
	 return true;
      case "let":
      case "let-opt":
      case "let-forin":
	 return true;
      case "var":
      case "param":
      case "record":
      case "export":
	 return false;
      default:
	 throw `j2sVarp: wrong binder "${decl.binder}"`;
   }
}

/*---------------------------------------------------------------------*/
/*    j2sConstp ...                                                    */
/*---------------------------------------------------------------------*/
export function j2sConstp(decl) {
   if (decl.writable) {
      return false;
   } else {
      switch (decl.binder) {
	 case "let":
	 case "let-opt":
	 case "let-forin":
	 case "export":
	    return true;
	 case "var":
	 case "param":
	 case "record":
	    return false;
	 default:
	    throw `j2sConstp: wrong binder "${decl.binder}"`;
      }
   }
}

/*---------------------------------------------------------------------*/
/*    j2sfunExpressionp ...                                            */
/*---------------------------------------------------------------------*/
export function j2sfunExpressionp(fun) {
   if (fun.decl instanceof J2SDeclFun) {
      return fun.decl.expression;
   } else {
      return false;
   }
}

/*---------------------------------------------------------------------*/
/*    hopcWalk ...                                                     */
/*---------------------------------------------------------------------*/
function walk(proc) {
   proc(this);
   for (let k in this) {
      const p = this[k];
      if (p instanceof Object) {
	 if ("hopcWalk" in p) {
	    p.hopcWalk(proc);
	 } else if (pairp(p)) {
	    forEach(e => {
	       if ("hopcWalk" in e) {
		  e.hopcWalk(proc);
	       }
	    }, p);
	 }
      }
   }
}

J2SNode.prototype.hopcWalk = walk;
J2SImportPath.prototype.hopcWalk = walk;
J2SImportName.prototype.hopcWalk = walk;

