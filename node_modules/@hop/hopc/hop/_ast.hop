;*=====================================================================*/
;*    serrano/prgm/project/hop/hop/node_modules/hopc/hop/_ast.hop      */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Fri Jun 14 11:11:40 2024                          */
;*    Last change :  Fri Jun 14 13:49:53 2024 (serrano)                */
;*    Copyright   :  2024 Manuel Serrano                               */
;*    -------------------------------------------------------------    */
;*    Ast wrapper                                                      */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module _ast
   
   (library hopscript hop nodejs js2scheme)
   
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))


;*---------------------------------------------------------------------*/
;*    hopscript ...                                                    */
;*---------------------------------------------------------------------*/
(define (hopscript %this this %scope %module)
   
   (js-export (isNative wrap registerWrapper)

      (define wrappers
	 (create-hashtable :weak 'open-string))
      
      (define isNative
	 (js-make-function %this
	    (lambda (this obj)
	       (isa? obj J2SNode))
	    (js-function-arity 1 0)
	    (js-function-info :name "isNative" :len 1)))

      (define wrap
	 (js-make-function %this
	    (lambda (this obj)
	       (if (isa? obj J2SNode)
		   (wrap-value obj wrappers %this)
		   (js-raise-type-error %this
		      "wrap: not a wrapped J2SNode ~a" obj)))
	    (js-function-arity 1 0)
	    (js-function-info :name "wrap" :len 1)))

      (define registerWrapper
	 (js-make-function %this
	    (lambda (this clazz ctor)
	       (hashtable-put! wrappers (js-jsstring->string clazz) ctor))
	    (js-function-arity 2 0)
	    (js-function-info :name "registerWrapper" :len 1)))

      #unspecified))

;*---------------------------------------------------------------------*/
;*    wrap-value ...                                                   */
;*---------------------------------------------------------------------*/
(define (wrap-value obj wrappers::struct %this::JsGlobalObject)
   (with-trace '_ast "wrap-value"
      (trace-item "obj=" (typeof obj))
      (let wrap ((obj obj))
	 (with-trace '_ast "wrap-value.wrap"
	    (trace-item "obj=" (typeof obj))
	    (cond
	       ((isa? obj J2SNode)
		(let* ((clazz (object-class obj))
		       (ctor (hashtable-get wrappers (symbol->string! (class-name clazz)))))
		   (if (not ctor)
		       (js-raise-type-error %this
			  "wrap: not a wrapper for class ~s" (class-name clazz))
		       (let ((args (map! (lambda (f)
					    (let ((i (class-field-info f))
						  (v ((class-field-accessor f) obj)))
					       (trace-item "field=" (class-field-name f))
					       (if (and (pair? i) (member "notraverse" i) (isa? v J2SNode))
						   v
						   (wrap v))))
				      (filter (lambda (f)
						 (let ((i (class-field-info f)))
						    (or (not (pair? i)) (not (member "nojson" i)))))
					 (vector->list (class-all-fields clazz))))))
			  (let ((res (apply js-new %this ctor args)))
			     (trace-item "res=" (typeof res))
			     res)))))
	       ((number? obj)
		obj)
	       ((string? obj)
		(js-string->jsstring obj))
	       ((symbol? obj)
		(js-string->jsstring (symbol->string obj)))
	       ((boolean? obj)
		obj)
	       ((null? obj)
		obj)
	       ((eq? obj #unspecified)
		(js-undefined))
	       ((pair? obj)
		(js-vector->jsarray (list->vector (map wrap obj)) %this))
	       (else
		(js-raise-type-error %this
		   "wrap: not a wrapper for value ~a" obj)))))))
	  
	  
 
