/* generated file (mkjsast.scm), do not edit (02 December 2024) */

// generated by tools/mkjast.scm
"use strict"

export function tojson( obj ) {
  if (!(obj instanceof Object)) {
     if (obj === undefined) {
	return '{ "__undefined__": "undefined" }';
     } else {
        return JSON.stringify(obj);
     }
  } else if ('tojson' in obj) {
     return obj.tojson();
  } else if (obj instanceof Array) {
     return '[' + obj.map( tojson ).join(",") + ']';
  } else if ('__ast__' in obj) {
     return '{ "__ast__": ' + obj.__ast__.tojson() + '}';
  } else if (obj instanceof Object) {
     return '{' + Object.keys(obj).map(function(k) {
          return '"' + k + '": ' + tojson(obj[k]);
       }).join(",") + '}';
  } else {
     return obj.toString();
  }
};
export function J2SNode(loc) {
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "J2SNode";
}
Object.defineProperty(J2SNode.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SNode"'
      + ', "loc":' + tojson(this["loc"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SNode", J2SNode);
export function J2SStmt(loc) {
   J2SNode.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "J2SStmt";
}
J2SStmt.prototype = new J2SNode();
Object.defineProperty(J2SStmt.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SStmt"'
      + ', "loc":' + tojson(this["loc"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SStmt", J2SStmt);
export function J2SMeta(loc, meta, debug, optim, stmt) {
   J2SStmt.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["meta"] = meta;
      this["debug"] = debug;
      this["optim"] = optim;
      this["stmt"] = stmt;
   } else {
      this.meta = undefined;
      this.debug = 0;
      this.optim = 0;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SMeta";
}
J2SMeta.prototype = new J2SStmt();
Object.defineProperty(J2SMeta.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SMeta"'
      + ', "loc":' + tojson(this["loc"])
      + ', "meta":' + tojson(this["meta"])
      + ', "debug":' + tojson(this["debug"])
      + ', "optim":' + tojson(this["optim"])
      + ', "stmt":' + tojson(this["stmt"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SMeta", J2SMeta);
export function J2SSeq(loc, nodes) {
   J2SStmt.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["nodes"] = nodes;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "J2SSeq";
}
J2SSeq.prototype = new J2SStmt();
Object.defineProperty(J2SSeq.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SSeq"'
      + ', "loc":' + tojson(this["loc"])
      + ', "nodes":' + tojson(this["nodes"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SSeq", J2SSeq);
export function J2SBlock(loc, nodes, endloc) {
   J2SSeq.call(this, loc, nodes);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["nodes"] = nodes;
      this["endloc"] = endloc;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "J2SBlock";
}
J2SBlock.prototype = new J2SSeq();
Object.defineProperty(J2SBlock.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SBlock"'
      + ', "loc":' + tojson(this["loc"])
      + ', "nodes":' + tojson(this["nodes"])
      + ', "endloc":' + tojson(this["endloc"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SBlock", J2SBlock);
export function J2SProgram(loc, nodes, endloc, mode, path, pcacheSize, rxcacheSize, callSize, name, main, module, cnsts, decls, types, headers, globals, directEval, sourceMap, imports, exports) {
   J2SBlock.call(this, loc, nodes, endloc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["nodes"] = nodes;
      this["endloc"] = endloc;
      this["mode"] = mode;
      this["path"] = path;
      this["pcache-size"] = pcacheSize;
      this["rxcache-size"] = rxcacheSize;
      this["call-size"] = callSize;
      this["name"] = name;
      this["main"] = main;
      this["module"] = module;
      this["cnsts"] = cnsts;
      this["decls"] = decls;
      this["types"] = types;
      this["headers"] = headers;
      this["globals"] = globals;
      this["direct-eval"] = directEval;
      this["source-map"] = sourceMap;
      this["imports"] = imports;
      this["exports"] = exports;
   } else {
      this.mode = 'normal';
      this.pcacheSize = 0;
      this.rxcacheSize = 0;
      this.callSize = 0;
      this.name = false;
      this.main = false;
      this.module = false;
      this.cnsts = null;
      this.decls = null;
      this.types = null;
      this.headers = null;
      this.globals = null;
      this.directEval = true;
      this.sourceMap = false;
      this.imports = null;
      this.exports = null;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SProgram";
}
J2SProgram.prototype = new J2SBlock();
Object.defineProperty(J2SProgram.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SProgram"'
      + ', "loc":' + tojson(this["loc"])
      + ', "nodes":' + tojson(this["nodes"])
      + ', "endloc":' + tojson(this["endloc"])
      + ', "mode":' + tojson(this["mode"])
      + ', "path":' + tojson(this["path"])
      + ', "pcache-size":' + tojson(this["pcache-size"])
      + ', "rxcache-size":' + tojson(this["rxcache-size"])
      + ', "call-size":' + tojson(this["call-size"])
      + ', "name":' + tojson(this["name"])
      + ', "main":' + tojson(this["main"])
      + ', "module":' + tojson(this["module"])
      + ', "cnsts":' + tojson(this["cnsts"])
      + ', "decls":' + tojson(this["decls"])
      + ', "types":' + tojson(this["types"])
      + ', "headers":' + tojson(this["headers"])
      + ', "globals":' + tojson(this["globals"])
      + ', "direct-eval":' + tojson(this["direct-eval"])
      + ', "source-map":' + tojson(this["source-map"])
      + ', "imports":' + tojson(this["imports"])
      + ', "exports":' + tojson(this["exports"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SProgram", J2SProgram);
export function J2SDecl(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional) {
   J2SStmt.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["id"] = id;
      this["_scmid"] = _scmid;
      this["key"] = key;
      this["writable"] = writable;
      this["scope"] = scope;
      this["usecnt"] = usecnt;
      this["useinloop"] = useinloop;
      this["escape"] = escape;
      this["usage"] = usage;
      this["binder"] = binder;
      this["ctype"] = ctype;
      this["utype"] = utype;
      this["itype"] = itype;
      this["vtype"] = vtype;
      this["mtype"] = mtype;
      this["irange"] = irange;
      this["vrange"] = vrange;
      this["hint"] = hint;
      this["export"] = $$export;
      this["optional"] = optional;
   } else {
      this._scmid = false;
      this.key = 1;
      this.writable = true;
      this.scope = 'local';
      this.usecnt = 0;
      this.useinloop = false;
      this.escape = false;
      this.usage = ~~0;
      this.binder = 'var';
      this.ctype = 'any';
      this.utype = 'unknown';
      this.itype = 'unknown';
      this.vtype = 'unknown';
      this.mtype = 'unknown';
      this.irange = undefined;
      this.vrange = undefined;
      this.hint = null;
      this.$$export = false;
      this.optional = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SDecl";
}
J2SDecl.prototype = new J2SStmt();
Object.defineProperty(J2SDecl.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SDecl"'
      + ', "loc":' + tojson(this["loc"])
      + ', "id":' + tojson(this["id"])
      + ', "_scmid":' + tojson(this["_scmid"])
      + ', "key":' + tojson(this["key"])
      + ', "writable":' + tojson(this["writable"])
      + ', "scope":' + tojson(this["scope"])
      + ', "usecnt":' + tojson(this["usecnt"])
      + ', "useinloop":' + tojson(this["useinloop"])
      + ', "escape":' + tojson(this["escape"])
      + ', "usage":' + tojson(this["usage"])
      + ', "binder":' + tojson(this["binder"])
      + ', "ctype":' + tojson(this["ctype"])
      + ', "utype":' + tojson(this["utype"])
      + ', "itype":' + tojson(this["itype"])
      + ', "vtype":' + tojson(this["vtype"])
      + ', "mtype":' + tojson(this["mtype"])
      + ', "irange":' + tojson(this["irange"])
      + ', "vrange":' + tojson(this["vrange"])
      + ', "hint":' + tojson(this["hint"])
      + ', "export":' + tojson(this["export"])
      + ', "optional":' + tojson(this["optional"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SDecl", J2SDecl);
export function J2SDeclDestructure(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional) {
   J2SDecl.call(this, loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["id"] = id;
      this["_scmid"] = _scmid;
      this["key"] = key;
      this["writable"] = writable;
      this["scope"] = scope;
      this["usecnt"] = usecnt;
      this["useinloop"] = useinloop;
      this["escape"] = escape;
      this["usage"] = usage;
      this["binder"] = binder;
      this["ctype"] = ctype;
      this["utype"] = utype;
      this["itype"] = itype;
      this["vtype"] = vtype;
      this["mtype"] = mtype;
      this["irange"] = irange;
      this["vrange"] = vrange;
      this["hint"] = hint;
      this["export"] = $$export;
      this["optional"] = optional;
   } else {
      this._scmid = false;
      this.key = 2;
      this.writable = true;
      this.scope = 'local';
      this.usecnt = 0;
      this.useinloop = false;
      this.escape = false;
      this.usage = ~~0;
      this.binder = 'var';
      this.ctype = 'any';
      this.utype = 'unknown';
      this.itype = 'unknown';
      this.vtype = 'unknown';
      this.mtype = 'unknown';
      this.irange = undefined;
      this.vrange = undefined;
      this.hint = null;
      this.$$export = false;
      this.optional = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SDeclDestructure";
}
J2SDeclDestructure.prototype = new J2SDecl();
Object.defineProperty(J2SDeclDestructure.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SDeclDestructure"'
      + ', "loc":' + tojson(this["loc"])
      + ', "id":' + tojson(this["id"])
      + ', "_scmid":' + tojson(this["_scmid"])
      + ', "key":' + tojson(this["key"])
      + ', "writable":' + tojson(this["writable"])
      + ', "scope":' + tojson(this["scope"])
      + ', "usecnt":' + tojson(this["usecnt"])
      + ', "useinloop":' + tojson(this["useinloop"])
      + ', "escape":' + tojson(this["escape"])
      + ', "usage":' + tojson(this["usage"])
      + ', "binder":' + tojson(this["binder"])
      + ', "ctype":' + tojson(this["ctype"])
      + ', "utype":' + tojson(this["utype"])
      + ', "itype":' + tojson(this["itype"])
      + ', "vtype":' + tojson(this["vtype"])
      + ', "mtype":' + tojson(this["mtype"])
      + ', "irange":' + tojson(this["irange"])
      + ', "vrange":' + tojson(this["vrange"])
      + ', "hint":' + tojson(this["hint"])
      + ', "export":' + tojson(this["export"])
      + ', "optional":' + tojson(this["optional"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SDeclDestructure", J2SDeclDestructure);
export function J2SDeclRest(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional, allocPolicy) {
   J2SDecl.call(this, loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["id"] = id;
      this["_scmid"] = _scmid;
      this["key"] = key;
      this["writable"] = writable;
      this["scope"] = scope;
      this["usecnt"] = usecnt;
      this["useinloop"] = useinloop;
      this["escape"] = escape;
      this["usage"] = usage;
      this["binder"] = binder;
      this["ctype"] = ctype;
      this["utype"] = utype;
      this["itype"] = itype;
      this["vtype"] = vtype;
      this["mtype"] = mtype;
      this["irange"] = irange;
      this["vrange"] = vrange;
      this["hint"] = hint;
      this["export"] = $$export;
      this["optional"] = optional;
      this["alloc-policy"] = allocPolicy;
   } else {
      this._scmid = false;
      this.key = 3;
      this.writable = true;
      this.scope = 'local';
      this.usecnt = 0;
      this.useinloop = false;
      this.escape = false;
      this.usage = ~~0;
      this.binder = 'var';
      this.ctype = 'any';
      this.utype = 'unknown';
      this.itype = 'unknown';
      this.vtype = 'unknown';
      this.mtype = 'unknown';
      this.irange = undefined;
      this.vrange = undefined;
      this.hint = null;
      this.$$export = false;
      this.optional = false;
      this.allocPolicy = 'heap';
      Object.assign(this, loc);
   }
   this.__node__ = "J2SDeclRest";
}
J2SDeclRest.prototype = new J2SDecl();
Object.defineProperty(J2SDeclRest.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SDeclRest"'
      + ', "loc":' + tojson(this["loc"])
      + ', "id":' + tojson(this["id"])
      + ', "_scmid":' + tojson(this["_scmid"])
      + ', "key":' + tojson(this["key"])
      + ', "writable":' + tojson(this["writable"])
      + ', "scope":' + tojson(this["scope"])
      + ', "usecnt":' + tojson(this["usecnt"])
      + ', "useinloop":' + tojson(this["useinloop"])
      + ', "escape":' + tojson(this["escape"])
      + ', "usage":' + tojson(this["usage"])
      + ', "binder":' + tojson(this["binder"])
      + ', "ctype":' + tojson(this["ctype"])
      + ', "utype":' + tojson(this["utype"])
      + ', "itype":' + tojson(this["itype"])
      + ', "vtype":' + tojson(this["vtype"])
      + ', "mtype":' + tojson(this["mtype"])
      + ', "irange":' + tojson(this["irange"])
      + ', "vrange":' + tojson(this["vrange"])
      + ', "hint":' + tojson(this["hint"])
      + ', "export":' + tojson(this["export"])
      + ', "optional":' + tojson(this["optional"])
      + ', "alloc-policy":' + tojson(this["alloc-policy"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SDeclRest", J2SDeclRest);
export function J2SDeclArguments(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional, allocPolicy, argid, mode, fun) {
   J2SDeclRest.call(this, loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional, allocPolicy);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["id"] = id;
      this["_scmid"] = _scmid;
      this["key"] = key;
      this["writable"] = writable;
      this["scope"] = scope;
      this["usecnt"] = usecnt;
      this["useinloop"] = useinloop;
      this["escape"] = escape;
      this["usage"] = usage;
      this["binder"] = binder;
      this["ctype"] = ctype;
      this["utype"] = utype;
      this["itype"] = itype;
      this["vtype"] = vtype;
      this["mtype"] = mtype;
      this["irange"] = irange;
      this["vrange"] = vrange;
      this["hint"] = hint;
      this["export"] = $$export;
      this["optional"] = optional;
      this["alloc-policy"] = allocPolicy;
      this["argid"] = argid;
      this["mode"] = mode;
      this["fun"] = fun;
   } else {
      this._scmid = false;
      this.key = 4;
      this.writable = true;
      this.scope = 'local';
      this.usecnt = 0;
      this.useinloop = false;
      this.escape = false;
      this.usage = ~~0;
      this.binder = 'var';
      this.ctype = 'any';
      this.utype = 'unknown';
      this.itype = 'unknown';
      this.vtype = 'unknown';
      this.mtype = 'unknown';
      this.irange = undefined;
      this.vrange = undefined;
      this.hint = null;
      this.$$export = false;
      this.optional = false;
      this.allocPolicy = 'heap';
      Object.assign(this, loc);
   }
   this.__node__ = "J2SDeclArguments";
}
J2SDeclArguments.prototype = new J2SDeclRest();
Object.defineProperty(J2SDeclArguments.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SDeclArguments"'
      + ', "loc":' + tojson(this["loc"])
      + ', "id":' + tojson(this["id"])
      + ', "_scmid":' + tojson(this["_scmid"])
      + ', "key":' + tojson(this["key"])
      + ', "writable":' + tojson(this["writable"])
      + ', "scope":' + tojson(this["scope"])
      + ', "usecnt":' + tojson(this["usecnt"])
      + ', "useinloop":' + tojson(this["useinloop"])
      + ', "escape":' + tojson(this["escape"])
      + ', "usage":' + tojson(this["usage"])
      + ', "binder":' + tojson(this["binder"])
      + ', "ctype":' + tojson(this["ctype"])
      + ', "utype":' + tojson(this["utype"])
      + ', "itype":' + tojson(this["itype"])
      + ', "vtype":' + tojson(this["vtype"])
      + ', "mtype":' + tojson(this["mtype"])
      + ', "irange":' + tojson(this["irange"])
      + ', "vrange":' + tojson(this["vrange"])
      + ', "hint":' + tojson(this["hint"])
      + ', "export":' + tojson(this["export"])
      + ', "optional":' + tojson(this["optional"])
      + ', "alloc-policy":' + tojson(this["alloc-policy"])
      + ', "argid":' + tojson(this["argid"])
      + ', "mode":' + tojson(this["mode"])
      + ', "fun":' + tojson(this["fun"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SDeclArguments", J2SDeclArguments);
export function J2SDeclInit(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional, val) {
   J2SDecl.call(this, loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["id"] = id;
      this["_scmid"] = _scmid;
      this["key"] = key;
      this["writable"] = writable;
      this["scope"] = scope;
      this["usecnt"] = usecnt;
      this["useinloop"] = useinloop;
      this["escape"] = escape;
      this["usage"] = usage;
      this["binder"] = binder;
      this["ctype"] = ctype;
      this["utype"] = utype;
      this["itype"] = itype;
      this["vtype"] = vtype;
      this["mtype"] = mtype;
      this["irange"] = irange;
      this["vrange"] = vrange;
      this["hint"] = hint;
      this["export"] = $$export;
      this["optional"] = optional;
      this["val"] = val;
   } else {
      this._scmid = false;
      this.key = 5;
      this.writable = true;
      this.scope = 'local';
      this.usecnt = 0;
      this.useinloop = false;
      this.escape = false;
      this.usage = ~~0;
      this.binder = 'var';
      this.ctype = 'any';
      this.utype = 'unknown';
      this.itype = 'unknown';
      this.vtype = 'unknown';
      this.mtype = 'unknown';
      this.irange = undefined;
      this.vrange = undefined;
      this.hint = null;
      this.$$export = false;
      this.optional = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SDeclInit";
}
J2SDeclInit.prototype = new J2SDecl();
Object.defineProperty(J2SDeclInit.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SDeclInit"'
      + ', "loc":' + tojson(this["loc"])
      + ', "id":' + tojson(this["id"])
      + ', "_scmid":' + tojson(this["_scmid"])
      + ', "key":' + tojson(this["key"])
      + ', "writable":' + tojson(this["writable"])
      + ', "scope":' + tojson(this["scope"])
      + ', "usecnt":' + tojson(this["usecnt"])
      + ', "useinloop":' + tojson(this["useinloop"])
      + ', "escape":' + tojson(this["escape"])
      + ', "usage":' + tojson(this["usage"])
      + ', "binder":' + tojson(this["binder"])
      + ', "ctype":' + tojson(this["ctype"])
      + ', "utype":' + tojson(this["utype"])
      + ', "itype":' + tojson(this["itype"])
      + ', "vtype":' + tojson(this["vtype"])
      + ', "mtype":' + tojson(this["mtype"])
      + ', "irange":' + tojson(this["irange"])
      + ', "vrange":' + tojson(this["vrange"])
      + ', "hint":' + tojson(this["hint"])
      + ', "export":' + tojson(this["export"])
      + ', "optional":' + tojson(this["optional"])
      + ', "val":' + tojson(this["val"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SDeclInit", J2SDeclInit);
export function J2SDeclInitDestructure(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional, val) {
   J2SDeclInit.call(this, loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional, val);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["id"] = id;
      this["_scmid"] = _scmid;
      this["key"] = key;
      this["writable"] = writable;
      this["scope"] = scope;
      this["usecnt"] = usecnt;
      this["useinloop"] = useinloop;
      this["escape"] = escape;
      this["usage"] = usage;
      this["binder"] = binder;
      this["ctype"] = ctype;
      this["utype"] = utype;
      this["itype"] = itype;
      this["vtype"] = vtype;
      this["mtype"] = mtype;
      this["irange"] = irange;
      this["vrange"] = vrange;
      this["hint"] = hint;
      this["export"] = $$export;
      this["optional"] = optional;
      this["val"] = val;
   } else {
      this._scmid = false;
      this.key = 6;
      this.writable = true;
      this.scope = 'local';
      this.usecnt = 0;
      this.useinloop = false;
      this.escape = false;
      this.usage = ~~0;
      this.binder = 'var';
      this.ctype = 'any';
      this.utype = 'unknown';
      this.itype = 'unknown';
      this.vtype = 'unknown';
      this.mtype = 'unknown';
      this.irange = undefined;
      this.vrange = undefined;
      this.hint = null;
      this.$$export = false;
      this.optional = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SDeclInitDestructure";
}
J2SDeclInitDestructure.prototype = new J2SDeclInit();
Object.defineProperty(J2SDeclInitDestructure.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SDeclInitDestructure"'
      + ', "loc":' + tojson(this["loc"])
      + ', "id":' + tojson(this["id"])
      + ', "_scmid":' + tojson(this["_scmid"])
      + ', "key":' + tojson(this["key"])
      + ', "writable":' + tojson(this["writable"])
      + ', "scope":' + tojson(this["scope"])
      + ', "usecnt":' + tojson(this["usecnt"])
      + ', "useinloop":' + tojson(this["useinloop"])
      + ', "escape":' + tojson(this["escape"])
      + ', "usage":' + tojson(this["usage"])
      + ', "binder":' + tojson(this["binder"])
      + ', "ctype":' + tojson(this["ctype"])
      + ', "utype":' + tojson(this["utype"])
      + ', "itype":' + tojson(this["itype"])
      + ', "vtype":' + tojson(this["vtype"])
      + ', "mtype":' + tojson(this["mtype"])
      + ', "irange":' + tojson(this["irange"])
      + ', "vrange":' + tojson(this["vrange"])
      + ', "hint":' + tojson(this["hint"])
      + ', "export":' + tojson(this["export"])
      + ', "optional":' + tojson(this["optional"])
      + ', "val":' + tojson(this["val"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SDeclInitDestructure", J2SDeclInitDestructure);
export function J2SDeclFun(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional, val, expression) {
   J2SDeclInit.call(this, loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional, val);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["id"] = id;
      this["_scmid"] = _scmid;
      this["key"] = key;
      this["writable"] = writable;
      this["scope"] = scope;
      this["usecnt"] = usecnt;
      this["useinloop"] = useinloop;
      this["escape"] = escape;
      this["usage"] = usage;
      this["binder"] = binder;
      this["ctype"] = ctype;
      this["utype"] = utype;
      this["itype"] = itype;
      this["vtype"] = vtype;
      this["mtype"] = mtype;
      this["irange"] = irange;
      this["vrange"] = vrange;
      this["hint"] = hint;
      this["export"] = $$export;
      this["optional"] = optional;
      this["val"] = val;
      this["expression"] = expression;
   } else {
      this._scmid = false;
      this.key = 7;
      this.writable = true;
      this.scope = 'local';
      this.usecnt = 0;
      this.useinloop = false;
      this.escape = false;
      this.usage = ~~0;
      this.binder = 'var';
      this.ctype = 'any';
      this.utype = 'unknown';
      this.itype = 'unknown';
      this.vtype = 'unknown';
      this.mtype = 'unknown';
      this.irange = undefined;
      this.vrange = undefined;
      this.hint = null;
      this.$$export = false;
      this.optional = false;
      this.expression = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SDeclFun";
}
J2SDeclFun.prototype = new J2SDeclInit();
Object.defineProperty(J2SDeclFun.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SDeclFun"'
      + ', "loc":' + tojson(this["loc"])
      + ', "id":' + tojson(this["id"])
      + ', "_scmid":' + tojson(this["_scmid"])
      + ', "key":' + tojson(this["key"])
      + ', "writable":' + tojson(this["writable"])
      + ', "scope":' + tojson(this["scope"])
      + ', "usecnt":' + tojson(this["usecnt"])
      + ', "useinloop":' + tojson(this["useinloop"])
      + ', "escape":' + tojson(this["escape"])
      + ', "usage":' + tojson(this["usage"])
      + ', "binder":' + tojson(this["binder"])
      + ', "ctype":' + tojson(this["ctype"])
      + ', "utype":' + tojson(this["utype"])
      + ', "itype":' + tojson(this["itype"])
      + ', "vtype":' + tojson(this["vtype"])
      + ', "mtype":' + tojson(this["mtype"])
      + ', "irange":' + tojson(this["irange"])
      + ', "vrange":' + tojson(this["vrange"])
      + ', "hint":' + tojson(this["hint"])
      + ', "export":' + tojson(this["export"])
      + ', "optional":' + tojson(this["optional"])
      + ', "val":' + tojson(this["val"])
      + ', "expression":' + tojson(this["expression"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SDeclFun", J2SDeclFun);
export function J2SDeclFunType(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional, val, expression) {
   J2SDeclFun.call(this, loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional, val, expression);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["id"] = id;
      this["_scmid"] = _scmid;
      this["key"] = key;
      this["writable"] = writable;
      this["scope"] = scope;
      this["usecnt"] = usecnt;
      this["useinloop"] = useinloop;
      this["escape"] = escape;
      this["usage"] = usage;
      this["binder"] = binder;
      this["ctype"] = ctype;
      this["utype"] = utype;
      this["itype"] = itype;
      this["vtype"] = vtype;
      this["mtype"] = mtype;
      this["irange"] = irange;
      this["vrange"] = vrange;
      this["hint"] = hint;
      this["export"] = $$export;
      this["optional"] = optional;
      this["val"] = val;
      this["expression"] = expression;
   } else {
      this._scmid = false;
      this.key = 8;
      this.writable = true;
      this.scope = 'local';
      this.usecnt = 0;
      this.useinloop = false;
      this.escape = false;
      this.usage = ~~0;
      this.binder = 'var';
      this.ctype = 'any';
      this.utype = 'unknown';
      this.itype = 'unknown';
      this.vtype = 'unknown';
      this.mtype = 'unknown';
      this.irange = undefined;
      this.vrange = undefined;
      this.hint = null;
      this.$$export = false;
      this.optional = false;
      this.expression = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SDeclFunType";
}
J2SDeclFunType.prototype = new J2SDeclFun();
Object.defineProperty(J2SDeclFunType.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SDeclFunType"'
      + ', "loc":' + tojson(this["loc"])
      + ', "id":' + tojson(this["id"])
      + ', "_scmid":' + tojson(this["_scmid"])
      + ', "key":' + tojson(this["key"])
      + ', "writable":' + tojson(this["writable"])
      + ', "scope":' + tojson(this["scope"])
      + ', "usecnt":' + tojson(this["usecnt"])
      + ', "useinloop":' + tojson(this["useinloop"])
      + ', "escape":' + tojson(this["escape"])
      + ', "usage":' + tojson(this["usage"])
      + ', "binder":' + tojson(this["binder"])
      + ', "ctype":' + tojson(this["ctype"])
      + ', "utype":' + tojson(this["utype"])
      + ', "itype":' + tojson(this["itype"])
      + ', "vtype":' + tojson(this["vtype"])
      + ', "mtype":' + tojson(this["mtype"])
      + ', "irange":' + tojson(this["irange"])
      + ', "vrange":' + tojson(this["vrange"])
      + ', "hint":' + tojson(this["hint"])
      + ', "export":' + tojson(this["export"])
      + ', "optional":' + tojson(this["optional"])
      + ', "val":' + tojson(this["val"])
      + ', "expression":' + tojson(this["expression"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SDeclFunType", J2SDeclFunType);
export function J2SDeclSvc(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional, val, expression) {
   J2SDeclFun.call(this, loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional, val, expression);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["id"] = id;
      this["_scmid"] = _scmid;
      this["key"] = key;
      this["writable"] = writable;
      this["scope"] = scope;
      this["usecnt"] = usecnt;
      this["useinloop"] = useinloop;
      this["escape"] = escape;
      this["usage"] = usage;
      this["binder"] = binder;
      this["ctype"] = ctype;
      this["utype"] = utype;
      this["itype"] = itype;
      this["vtype"] = vtype;
      this["mtype"] = mtype;
      this["irange"] = irange;
      this["vrange"] = vrange;
      this["hint"] = hint;
      this["export"] = $$export;
      this["optional"] = optional;
      this["val"] = val;
      this["expression"] = expression;
   } else {
      this._scmid = false;
      this.key = 9;
      this.writable = true;
      this.scope = 'local';
      this.usecnt = 0;
      this.useinloop = false;
      this.escape = false;
      this.usage = ~~0;
      this.binder = 'var';
      this.ctype = 'any';
      this.utype = 'unknown';
      this.itype = 'unknown';
      this.vtype = 'unknown';
      this.mtype = 'unknown';
      this.irange = undefined;
      this.vrange = undefined;
      this.hint = null;
      this.$$export = false;
      this.optional = false;
      this.expression = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SDeclSvc";
}
J2SDeclSvc.prototype = new J2SDeclFun();
Object.defineProperty(J2SDeclSvc.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SDeclSvc"'
      + ', "loc":' + tojson(this["loc"])
      + ', "id":' + tojson(this["id"])
      + ', "_scmid":' + tojson(this["_scmid"])
      + ', "key":' + tojson(this["key"])
      + ', "writable":' + tojson(this["writable"])
      + ', "scope":' + tojson(this["scope"])
      + ', "usecnt":' + tojson(this["usecnt"])
      + ', "useinloop":' + tojson(this["useinloop"])
      + ', "escape":' + tojson(this["escape"])
      + ', "usage":' + tojson(this["usage"])
      + ', "binder":' + tojson(this["binder"])
      + ', "ctype":' + tojson(this["ctype"])
      + ', "utype":' + tojson(this["utype"])
      + ', "itype":' + tojson(this["itype"])
      + ', "vtype":' + tojson(this["vtype"])
      + ', "mtype":' + tojson(this["mtype"])
      + ', "irange":' + tojson(this["irange"])
      + ', "vrange":' + tojson(this["vrange"])
      + ', "hint":' + tojson(this["hint"])
      + ', "export":' + tojson(this["export"])
      + ', "optional":' + tojson(this["optional"])
      + ', "val":' + tojson(this["val"])
      + ', "expression":' + tojson(this["expression"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SDeclSvc", J2SDeclSvc);
export function J2SDeclClass(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional, val) {
   J2SDeclInit.call(this, loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional, val);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["id"] = id;
      this["_scmid"] = _scmid;
      this["key"] = key;
      this["writable"] = writable;
      this["scope"] = scope;
      this["usecnt"] = usecnt;
      this["useinloop"] = useinloop;
      this["escape"] = escape;
      this["usage"] = usage;
      this["binder"] = binder;
      this["ctype"] = ctype;
      this["utype"] = utype;
      this["itype"] = itype;
      this["vtype"] = vtype;
      this["mtype"] = mtype;
      this["irange"] = irange;
      this["vrange"] = vrange;
      this["hint"] = hint;
      this["export"] = $$export;
      this["optional"] = optional;
      this["val"] = val;
   } else {
      this._scmid = false;
      this.key = 10;
      this.writable = true;
      this.scope = 'local';
      this.usecnt = 0;
      this.useinloop = false;
      this.escape = false;
      this.usage = ~~0;
      this.binder = 'var';
      this.ctype = 'any';
      this.utype = 'unknown';
      this.itype = 'unknown';
      this.vtype = 'unknown';
      this.mtype = 'unknown';
      this.irange = undefined;
      this.vrange = undefined;
      this.hint = null;
      this.$$export = false;
      this.optional = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SDeclClass";
}
J2SDeclClass.prototype = new J2SDeclInit();
Object.defineProperty(J2SDeclClass.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SDeclClass"'
      + ', "loc":' + tojson(this["loc"])
      + ', "id":' + tojson(this["id"])
      + ', "_scmid":' + tojson(this["_scmid"])
      + ', "key":' + tojson(this["key"])
      + ', "writable":' + tojson(this["writable"])
      + ', "scope":' + tojson(this["scope"])
      + ', "usecnt":' + tojson(this["usecnt"])
      + ', "useinloop":' + tojson(this["useinloop"])
      + ', "escape":' + tojson(this["escape"])
      + ', "usage":' + tojson(this["usage"])
      + ', "binder":' + tojson(this["binder"])
      + ', "ctype":' + tojson(this["ctype"])
      + ', "utype":' + tojson(this["utype"])
      + ', "itype":' + tojson(this["itype"])
      + ', "vtype":' + tojson(this["vtype"])
      + ', "mtype":' + tojson(this["mtype"])
      + ', "irange":' + tojson(this["irange"])
      + ', "vrange":' + tojson(this["vrange"])
      + ', "hint":' + tojson(this["hint"])
      + ', "export":' + tojson(this["export"])
      + ', "optional":' + tojson(this["optional"])
      + ', "val":' + tojson(this["val"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SDeclClass", J2SDeclClass);
export function J2SDeclExtern(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional, val, bind, hiddenClass, raiseOnWrite, sweepable, configurable) {
   J2SDeclInit.call(this, loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional, val);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["id"] = id;
      this["_scmid"] = _scmid;
      this["key"] = key;
      this["writable"] = writable;
      this["scope"] = scope;
      this["usecnt"] = usecnt;
      this["useinloop"] = useinloop;
      this["escape"] = escape;
      this["usage"] = usage;
      this["binder"] = binder;
      this["ctype"] = ctype;
      this["utype"] = utype;
      this["itype"] = itype;
      this["vtype"] = vtype;
      this["mtype"] = mtype;
      this["irange"] = irange;
      this["vrange"] = vrange;
      this["hint"] = hint;
      this["export"] = $$export;
      this["optional"] = optional;
      this["val"] = val;
      this["bind"] = bind;
      this["hidden-class"] = hiddenClass;
      this["raise-on-write"] = raiseOnWrite;
      this["sweepable"] = sweepable;
      this["configurable"] = configurable;
   } else {
      this._scmid = false;
      this.key = 11;
      this.writable = true;
      this.scope = 'local';
      this.usecnt = 0;
      this.useinloop = false;
      this.escape = false;
      this.usage = ~~0;
      this.binder = 'var';
      this.ctype = 'any';
      this.utype = 'unknown';
      this.itype = 'unknown';
      this.vtype = 'unknown';
      this.mtype = 'unknown';
      this.irange = undefined;
      this.vrange = undefined;
      this.hint = null;
      this.$$export = false;
      this.optional = false;
      this.bind = false;
      this.hiddenClass = true;
      this.raiseOnWrite = false;
      this.sweepable = 'scheme';
      this.configurable = true;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SDeclExtern";
}
J2SDeclExtern.prototype = new J2SDeclInit();
Object.defineProperty(J2SDeclExtern.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SDeclExtern"'
      + ', "loc":' + tojson(this["loc"])
      + ', "id":' + tojson(this["id"])
      + ', "_scmid":' + tojson(this["_scmid"])
      + ', "key":' + tojson(this["key"])
      + ', "writable":' + tojson(this["writable"])
      + ', "scope":' + tojson(this["scope"])
      + ', "usecnt":' + tojson(this["usecnt"])
      + ', "useinloop":' + tojson(this["useinloop"])
      + ', "escape":' + tojson(this["escape"])
      + ', "usage":' + tojson(this["usage"])
      + ', "binder":' + tojson(this["binder"])
      + ', "ctype":' + tojson(this["ctype"])
      + ', "utype":' + tojson(this["utype"])
      + ', "itype":' + tojson(this["itype"])
      + ', "vtype":' + tojson(this["vtype"])
      + ', "mtype":' + tojson(this["mtype"])
      + ', "irange":' + tojson(this["irange"])
      + ', "vrange":' + tojson(this["vrange"])
      + ', "hint":' + tojson(this["hint"])
      + ', "export":' + tojson(this["export"])
      + ', "optional":' + tojson(this["optional"])
      + ', "val":' + tojson(this["val"])
      + ', "bind":' + tojson(this["bind"])
      + ', "hidden-class":' + tojson(this["hidden-class"])
      + ', "raise-on-write":' + tojson(this["raise-on-write"])
      + ', "sweepable":' + tojson(this["sweepable"])
      + ', "configurable":' + tojson(this["configurable"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SDeclExtern", J2SDeclExtern);
export function J2SDeclImport(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional, alias, $$import) {
   J2SDecl.call(this, loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["id"] = id;
      this["_scmid"] = _scmid;
      this["key"] = key;
      this["writable"] = writable;
      this["scope"] = scope;
      this["usecnt"] = usecnt;
      this["useinloop"] = useinloop;
      this["escape"] = escape;
      this["usage"] = usage;
      this["binder"] = binder;
      this["ctype"] = ctype;
      this["utype"] = utype;
      this["itype"] = itype;
      this["vtype"] = vtype;
      this["mtype"] = mtype;
      this["irange"] = irange;
      this["vrange"] = vrange;
      this["hint"] = hint;
      this["export"] = $$export;
      this["optional"] = optional;
      this["alias"] = alias;
      this["import"] = $$import;
   } else {
      this._scmid = false;
      this.key = 12;
      this.writable = true;
      this.scope = 'local';
      this.usecnt = 0;
      this.useinloop = false;
      this.escape = false;
      this.usage = ~~0;
      this.binder = 'var';
      this.ctype = 'any';
      this.utype = 'unknown';
      this.itype = 'unknown';
      this.vtype = 'unknown';
      this.mtype = 'unknown';
      this.irange = undefined;
      this.vrange = undefined;
      this.hint = null;
      this.$$export = false;
      this.optional = false;
      this.alias = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SDeclImport";
}
J2SDeclImport.prototype = new J2SDecl();
Object.defineProperty(J2SDeclImport.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SDeclImport"'
      + ', "loc":' + tojson(this["loc"])
      + ', "id":' + tojson(this["id"])
      + ', "_scmid":' + tojson(this["_scmid"])
      + ', "key":' + tojson(this["key"])
      + ', "writable":' + tojson(this["writable"])
      + ', "scope":' + tojson(this["scope"])
      + ', "usecnt":' + tojson(this["usecnt"])
      + ', "useinloop":' + tojson(this["useinloop"])
      + ', "escape":' + tojson(this["escape"])
      + ', "usage":' + tojson(this["usage"])
      + ', "binder":' + tojson(this["binder"])
      + ', "ctype":' + tojson(this["ctype"])
      + ', "utype":' + tojson(this["utype"])
      + ', "itype":' + tojson(this["itype"])
      + ', "vtype":' + tojson(this["vtype"])
      + ', "mtype":' + tojson(this["mtype"])
      + ', "irange":' + tojson(this["irange"])
      + ', "vrange":' + tojson(this["vrange"])
      + ', "hint":' + tojson(this["hint"])
      + ', "export":' + tojson(this["export"])
      + ', "optional":' + tojson(this["optional"])
      + ', "alias":' + tojson(this["alias"])
      + ', "import":' + tojson(this["import"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SDeclImport", J2SDeclImport);
export function J2SDeclInterface(loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional) {
   J2SDecl.call(this, loc, id, _scmid, key, writable, scope, usecnt, useinloop, escape, usage, binder, ctype, utype, itype, vtype, mtype, irange, vrange, hint, $$export, optional);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["id"] = id;
      this["_scmid"] = _scmid;
      this["key"] = key;
      this["writable"] = writable;
      this["scope"] = scope;
      this["usecnt"] = usecnt;
      this["useinloop"] = useinloop;
      this["escape"] = escape;
      this["usage"] = usage;
      this["binder"] = binder;
      this["ctype"] = ctype;
      this["utype"] = utype;
      this["itype"] = itype;
      this["vtype"] = vtype;
      this["mtype"] = mtype;
      this["irange"] = irange;
      this["vrange"] = vrange;
      this["hint"] = hint;
      this["export"] = $$export;
      this["optional"] = optional;
   } else {
      this._scmid = false;
      this.key = 13;
      this.writable = true;
      this.scope = 'local';
      this.usecnt = 0;
      this.useinloop = false;
      this.escape = false;
      this.usage = ~~0;
      this.binder = 'var';
      this.ctype = 'any';
      this.utype = 'unknown';
      this.itype = 'unknown';
      this.vtype = 'unknown';
      this.mtype = 'unknown';
      this.irange = undefined;
      this.vrange = undefined;
      this.hint = null;
      this.$$export = false;
      this.optional = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SDeclInterface";
}
J2SDeclInterface.prototype = new J2SDecl();
Object.defineProperty(J2SDeclInterface.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SDeclInterface"'
      + ', "loc":' + tojson(this["loc"])
      + ', "id":' + tojson(this["id"])
      + ', "_scmid":' + tojson(this["_scmid"])
      + ', "key":' + tojson(this["key"])
      + ', "writable":' + tojson(this["writable"])
      + ', "scope":' + tojson(this["scope"])
      + ', "usecnt":' + tojson(this["usecnt"])
      + ', "useinloop":' + tojson(this["useinloop"])
      + ', "escape":' + tojson(this["escape"])
      + ', "usage":' + tojson(this["usage"])
      + ', "binder":' + tojson(this["binder"])
      + ', "ctype":' + tojson(this["ctype"])
      + ', "utype":' + tojson(this["utype"])
      + ', "itype":' + tojson(this["itype"])
      + ', "vtype":' + tojson(this["vtype"])
      + ', "mtype":' + tojson(this["mtype"])
      + ', "irange":' + tojson(this["irange"])
      + ', "vrange":' + tojson(this["vrange"])
      + ', "hint":' + tojson(this["hint"])
      + ', "export":' + tojson(this["export"])
      + ', "optional":' + tojson(this["optional"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SDeclInterface", J2SDeclInterface);
export function J2SExpr(loc, type, hint, range) {
   J2SNode.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SExpr";
}
J2SExpr.prototype = new J2SNode();
Object.defineProperty(J2SExpr.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SExpr"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SExpr", J2SExpr);
export function J2SCast(loc, type, hint, range, $$static, expr) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["static"] = $$static;
      this["expr"] = expr;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      this.$$static = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SCast";
}
J2SCast.prototype = new J2SExpr();
Object.defineProperty(J2SCast.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SCast"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "static":' + tojson(this["static"])
      + ', "expr":' + tojson(this["expr"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SCast", J2SCast);
export function J2SCheck(loc, type, hint, range, expr) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["expr"] = expr;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SCheck";
}
J2SCheck.prototype = new J2SExpr();
Object.defineProperty(J2SCheck.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SCheck"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "expr":' + tojson(this["expr"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SCheck", J2SCheck);
export function J2SStmtExpr(loc, expr) {
   J2SStmt.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["expr"] = expr;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "J2SStmtExpr";
}
J2SStmtExpr.prototype = new J2SStmt();
Object.defineProperty(J2SStmtExpr.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SStmtExpr"'
      + ', "loc":' + tojson(this["loc"])
      + ', "expr":' + tojson(this["expr"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SStmtExpr", J2SStmtExpr);
export function J2SIf(loc, test, then, $$else) {
   J2SStmt.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["test"] = test;
      this["then"] = then;
      this["else"] = $$else;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "J2SIf";
}
J2SIf.prototype = new J2SStmt();
Object.defineProperty(J2SIf.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SIf"'
      + ', "loc":' + tojson(this["loc"])
      + ', "test":' + tojson(this["test"])
      + ', "then":' + tojson(this["then"])
      + ', "else":' + tojson(this["else"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SIf", J2SIf);
export function J2SPrecache(loc, test, then, $$else, accesses) {
   J2SIf.call(this, loc, test, then, $$else);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["test"] = test;
      this["then"] = then;
      this["else"] = $$else;
      this["accesses"] = accesses;
   } else {
      this.accesses = null;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SPrecache";
}
J2SPrecache.prototype = new J2SIf();
Object.defineProperty(J2SPrecache.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SPrecache"'
      + ', "loc":' + tojson(this["loc"])
      + ', "test":' + tojson(this["test"])
      + ', "then":' + tojson(this["then"])
      + ', "else":' + tojson(this["else"])
      + ', "accesses":' + tojson(this["accesses"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SPrecache", J2SPrecache);
export function J2SIfIsRecord(loc, test, then, $$else) {
   J2SIf.call(this, loc, test, then, $$else);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["test"] = test;
      this["then"] = then;
      this["else"] = $$else;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "J2SIfIsRecord";
}
J2SIfIsRecord.prototype = new J2SIf();
Object.defineProperty(J2SIfIsRecord.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SIfIsRecord"'
      + ', "loc":' + tojson(this["loc"])
      + ', "test":' + tojson(this["test"])
      + ', "then":' + tojson(this["then"])
      + ', "else":' + tojson(this["else"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SIfIsRecord", J2SIfIsRecord);
export function J2SIfArgDefVal(loc, test, then, $$else) {
   J2SIf.call(this, loc, test, then, $$else);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["test"] = test;
      this["then"] = then;
      this["else"] = $$else;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "J2SIfArgDefVal";
}
J2SIfArgDefVal.prototype = new J2SIf();
Object.defineProperty(J2SIfArgDefVal.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SIfArgDefVal"'
      + ', "loc":' + tojson(this["loc"])
      + ', "test":' + tojson(this["test"])
      + ', "then":' + tojson(this["then"])
      + ', "else":' + tojson(this["else"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SIfArgDefVal", J2SIfArgDefVal);
export function J2SVarDecls(loc, decls) {
   J2SStmt.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["decls"] = decls;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "J2SVarDecls";
}
J2SVarDecls.prototype = new J2SStmt();
Object.defineProperty(J2SVarDecls.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SVarDecls"'
      + ', "loc":' + tojson(this["loc"])
      + ', "decls":' + tojson(this["decls"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SVarDecls", J2SVarDecls);
export function J2SLetBlock(loc, nodes, endloc, rec, decls, mode) {
   J2SBlock.call(this, loc, nodes, endloc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["nodes"] = nodes;
      this["endloc"] = endloc;
      this["rec"] = rec;
      this["decls"] = decls;
      this["mode"] = mode;
   } else {
      this.rec = true;
      this.mode = 'normal';
      Object.assign(this, loc);
   }
   this.__node__ = "J2SLetBlock";
}
J2SLetBlock.prototype = new J2SBlock();
Object.defineProperty(J2SLetBlock.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SLetBlock"'
      + ', "loc":' + tojson(this["loc"])
      + ', "nodes":' + tojson(this["nodes"])
      + ', "endloc":' + tojson(this["endloc"])
      + ', "rec":' + tojson(this["rec"])
      + ', "decls":' + tojson(this["decls"])
      + ', "mode":' + tojson(this["mode"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SLetBlock", J2SLetBlock);
export function J2SIdStmt(loc, needBindExitBreak, id) {
   J2SStmt.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["need-bind-exit-break"] = needBindExitBreak;
      this["id"] = id;
   } else {
      this.needBindExitBreak = true;
      this.id = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SIdStmt";
}
J2SIdStmt.prototype = new J2SStmt();
Object.defineProperty(J2SIdStmt.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SIdStmt"'
      + ', "loc":' + tojson(this["loc"])
      + ', "need-bind-exit-break":' + tojson(this["need-bind-exit-break"])
      + ', "id":' + tojson(this["id"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SIdStmt", J2SIdStmt);
export function J2SSwitch(loc, needBindExitBreak, id, key, cases) {
   J2SIdStmt.call(this, loc, needBindExitBreak, id);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["need-bind-exit-break"] = needBindExitBreak;
      this["id"] = id;
      this["key"] = key;
      this["cases"] = cases;
   } else {
      this.needBindExitBreak = true;
      this.id = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SSwitch";
}
J2SSwitch.prototype = new J2SIdStmt();
Object.defineProperty(J2SSwitch.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SSwitch"'
      + ', "loc":' + tojson(this["loc"])
      + ', "need-bind-exit-break":' + tojson(this["need-bind-exit-break"])
      + ', "id":' + tojson(this["id"])
      + ', "key":' + tojson(this["key"])
      + ', "cases":' + tojson(this["cases"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SSwitch", J2SSwitch);
export function J2SLoop(loc, needBindExitBreak, id, needBindExitContinue, body) {
   J2SIdStmt.call(this, loc, needBindExitBreak, id);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["need-bind-exit-break"] = needBindExitBreak;
      this["id"] = id;
      this["need-bind-exit-continue"] = needBindExitContinue;
      this["body"] = body;
   } else {
      this.needBindExitBreak = true;
      this.id = undefined;
      this.needBindExitContinue = true;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SLoop";
}
J2SLoop.prototype = new J2SIdStmt();
Object.defineProperty(J2SLoop.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SLoop"'
      + ', "loc":' + tojson(this["loc"])
      + ', "need-bind-exit-break":' + tojson(this["need-bind-exit-break"])
      + ', "id":' + tojson(this["id"])
      + ', "need-bind-exit-continue":' + tojson(this["need-bind-exit-continue"])
      + ', "body":' + tojson(this["body"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SLoop", J2SLoop);
export function J2SFor(loc, needBindExitBreak, id, needBindExitContinue, body, init, test, incr) {
   J2SLoop.call(this, loc, needBindExitBreak, id, needBindExitContinue, body);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["need-bind-exit-break"] = needBindExitBreak;
      this["id"] = id;
      this["need-bind-exit-continue"] = needBindExitContinue;
      this["body"] = body;
      this["init"] = init;
      this["test"] = test;
      this["incr"] = incr;
   } else {
      this.needBindExitBreak = true;
      this.id = undefined;
      this.needBindExitContinue = true;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SFor";
}
J2SFor.prototype = new J2SLoop();
Object.defineProperty(J2SFor.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SFor"'
      + ', "loc":' + tojson(this["loc"])
      + ', "need-bind-exit-break":' + tojson(this["need-bind-exit-break"])
      + ', "id":' + tojson(this["id"])
      + ', "need-bind-exit-continue":' + tojson(this["need-bind-exit-continue"])
      + ', "body":' + tojson(this["body"])
      + ', "init":' + tojson(this["init"])
      + ', "test":' + tojson(this["test"])
      + ', "incr":' + tojson(this["incr"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SFor", J2SFor);
export function J2SForIn(loc, needBindExitBreak, id, needBindExitContinue, body, op, lhs, obj) {
   J2SLoop.call(this, loc, needBindExitBreak, id, needBindExitContinue, body);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["need-bind-exit-break"] = needBindExitBreak;
      this["id"] = id;
      this["need-bind-exit-continue"] = needBindExitContinue;
      this["body"] = body;
      this["op"] = op;
      this["lhs"] = lhs;
      this["obj"] = obj;
   } else {
      this.needBindExitBreak = true;
      this.id = undefined;
      this.needBindExitContinue = true;
      this.op = 'in';
      Object.assign(this, loc);
   }
   this.__node__ = "J2SForIn";
}
J2SForIn.prototype = new J2SLoop();
Object.defineProperty(J2SForIn.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SForIn"'
      + ', "loc":' + tojson(this["loc"])
      + ', "need-bind-exit-break":' + tojson(this["need-bind-exit-break"])
      + ', "id":' + tojson(this["id"])
      + ', "need-bind-exit-continue":' + tojson(this["need-bind-exit-continue"])
      + ', "body":' + tojson(this["body"])
      + ', "op":' + tojson(this["op"])
      + ', "lhs":' + tojson(this["lhs"])
      + ', "obj":' + tojson(this["obj"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SForIn", J2SForIn);
export function J2SWhile(loc, needBindExitBreak, id, needBindExitContinue, body, test) {
   J2SLoop.call(this, loc, needBindExitBreak, id, needBindExitContinue, body);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["need-bind-exit-break"] = needBindExitBreak;
      this["id"] = id;
      this["need-bind-exit-continue"] = needBindExitContinue;
      this["body"] = body;
      this["test"] = test;
   } else {
      this.needBindExitBreak = true;
      this.id = undefined;
      this.needBindExitContinue = true;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SWhile";
}
J2SWhile.prototype = new J2SLoop();
Object.defineProperty(J2SWhile.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SWhile"'
      + ', "loc":' + tojson(this["loc"])
      + ', "need-bind-exit-break":' + tojson(this["need-bind-exit-break"])
      + ', "id":' + tojson(this["id"])
      + ', "need-bind-exit-continue":' + tojson(this["need-bind-exit-continue"])
      + ', "body":' + tojson(this["body"])
      + ', "test":' + tojson(this["test"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SWhile", J2SWhile);
export function J2SDo(loc, needBindExitBreak, id, needBindExitContinue, body, test) {
   J2SWhile.call(this, loc, needBindExitBreak, id, needBindExitContinue, body, test);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["need-bind-exit-break"] = needBindExitBreak;
      this["id"] = id;
      this["need-bind-exit-continue"] = needBindExitContinue;
      this["body"] = body;
      this["test"] = test;
   } else {
      this.needBindExitBreak = true;
      this.id = undefined;
      this.needBindExitContinue = true;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SDo";
}
J2SDo.prototype = new J2SWhile();
Object.defineProperty(J2SDo.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SDo"'
      + ', "loc":' + tojson(this["loc"])
      + ', "need-bind-exit-break":' + tojson(this["need-bind-exit-break"])
      + ', "id":' + tojson(this["id"])
      + ', "need-bind-exit-continue":' + tojson(this["need-bind-exit-continue"])
      + ', "body":' + tojson(this["body"])
      + ', "test":' + tojson(this["test"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SDo", J2SDo);
export function J2SLabel(loc, needBindExitBreak, id, body) {
   J2SIdStmt.call(this, loc, needBindExitBreak, id);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["need-bind-exit-break"] = needBindExitBreak;
      this["id"] = id;
      this["body"] = body;
   } else {
      this.needBindExitBreak = true;
      this.id = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SLabel";
}
J2SLabel.prototype = new J2SIdStmt();
Object.defineProperty(J2SLabel.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SLabel"'
      + ', "loc":' + tojson(this["loc"])
      + ', "need-bind-exit-break":' + tojson(this["need-bind-exit-break"])
      + ', "id":' + tojson(this["id"])
      + ', "body":' + tojson(this["body"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SLabel", J2SLabel);
export function J2SBreak(loc, target, id) {
   J2SStmt.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["target"] = target;
      this["id"] = id;
   } else {
      this.target = false;
      this.id = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SBreak";
}
J2SBreak.prototype = new J2SStmt();
Object.defineProperty(J2SBreak.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SBreak"'
      + ', "loc":' + tojson(this["loc"])
      + ', "target":' + tojson(this["target"])
      + ', "id":' + tojson(this["id"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SBreak", J2SBreak);
export function J2SContinue(loc, target, id) {
   J2SBreak.call(this, loc, target, id);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["target"] = target;
      this["id"] = id;
   } else {
      this.target = false;
      this.id = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SContinue";
}
J2SContinue.prototype = new J2SBreak();
Object.defineProperty(J2SContinue.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SContinue"'
      + ', "loc":' + tojson(this["loc"])
      + ', "target":' + tojson(this["target"])
      + ', "id":' + tojson(this["id"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SContinue", J2SContinue);
export function J2SNop(loc) {
   J2SStmt.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "J2SNop";
}
J2SNop.prototype = new J2SStmt();
Object.defineProperty(J2SNop.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SNop"'
      + ', "loc":' + tojson(this["loc"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SNop", J2SNop);
export function J2SCase(loc, expr, body, cascade) {
   J2SStmt.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["expr"] = expr;
      this["body"] = body;
      this["cascade"] = cascade;
   } else {
      this.cascade = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SCase";
}
J2SCase.prototype = new J2SStmt();
Object.defineProperty(J2SCase.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SCase"'
      + ', "loc":' + tojson(this["loc"])
      + ', "expr":' + tojson(this["expr"])
      + ', "body":' + tojson(this["body"])
      + ', "cascade":' + tojson(this["cascade"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SCase", J2SCase);
export function J2SDefault(loc, expr, body, cascade) {
   J2SCase.call(this, loc, expr, body, cascade);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["expr"] = expr;
      this["body"] = body;
      this["cascade"] = cascade;
   } else {
      this.cascade = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SDefault";
}
J2SDefault.prototype = new J2SCase();
Object.defineProperty(J2SDefault.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SDefault"'
      + ', "loc":' + tojson(this["loc"])
      + ', "expr":' + tojson(this["expr"])
      + ', "body":' + tojson(this["body"])
      + ', "cascade":' + tojson(this["cascade"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SDefault", J2SDefault);
export function J2SBindExit(loc, type, hint, range, lbl, utype, stmt) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["lbl"] = lbl;
      this["utype"] = utype;
      this["stmt"] = stmt;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      this.utype = 'unknown';
      Object.assign(this, loc);
   }
   this.__node__ = "J2SBindExit";
}
J2SBindExit.prototype = new J2SExpr();
Object.defineProperty(J2SBindExit.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SBindExit"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "lbl":' + tojson(this["lbl"])
      + ', "utype":' + tojson(this["utype"])
      + ', "stmt":' + tojson(this["stmt"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SBindExit", J2SBindExit);
export function J2SReturn(loc, exit, tail, from, expr) {
   J2SStmt.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["exit"] = exit;
      this["tail"] = tail;
      this["from"] = from;
      this["expr"] = expr;
   } else {
      this.exit = false;
      this.tail = true;
      this.from = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SReturn";
}
J2SReturn.prototype = new J2SStmt();
Object.defineProperty(J2SReturn.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SReturn"'
      + ', "loc":' + tojson(this["loc"])
      + ', "exit":' + tojson(this["exit"])
      + ', "tail":' + tojson(this["tail"])
      + ', "from":' + tojson(this["from"])
      + ', "expr":' + tojson(this["expr"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SReturn", J2SReturn);
export function J2SReturnYield(loc, expr, generator, kont) {
   J2SStmt.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["expr"] = expr;
      this["generator"] = generator;
      this["kont"] = kont;
   } else {
      this.generator = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SReturnYield";
}
J2SReturnYield.prototype = new J2SStmt();
Object.defineProperty(J2SReturnYield.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SReturnYield"'
      + ', "loc":' + tojson(this["loc"])
      + ', "expr":' + tojson(this["expr"])
      + ', "generator":' + tojson(this["generator"])
      + ', "kont":' + tojson(this["kont"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SReturnYield", J2SReturnYield);
export function J2SYield(loc, type, hint, range, expr, generator, $$await) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["expr"] = expr;
      this["generator"] = generator;
      this["await"] = $$await;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      this.generator = false;
      this.$$await = true;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SYield";
}
J2SYield.prototype = new J2SExpr();
Object.defineProperty(J2SYield.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SYield"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "expr":' + tojson(this["expr"])
      + ', "generator":' + tojson(this["generator"])
      + ', "await":' + tojson(this["await"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SYield", J2SYield);
export function J2SWith(loc, id, obj, block) {
   J2SStmt.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["id"] = id;
      this["obj"] = obj;
      this["block"] = block;
   } else {
      this.id = '__with1004';
      Object.assign(this, loc);
   }
   this.__node__ = "J2SWith";
}
J2SWith.prototype = new J2SStmt();
Object.defineProperty(J2SWith.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SWith"'
      + ', "loc":' + tojson(this["loc"])
      + ', "id":' + tojson(this["id"])
      + ', "obj":' + tojson(this["obj"])
      + ', "block":' + tojson(this["block"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SWith", J2SWith);
export function J2SThrow(loc, expr) {
   J2SStmt.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["expr"] = expr;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "J2SThrow";
}
J2SThrow.prototype = new J2SStmt();
Object.defineProperty(J2SThrow.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SThrow"'
      + ', "loc":' + tojson(this["loc"])
      + ', "expr":' + tojson(this["expr"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SThrow", J2SThrow);
export function J2SFun(loc, type, hint, range, rtype, rutype, rrange, idthis, idgen, mode, decl, needBindExitReturn, newTarget, vararg, name, generator, optimize, thisp, argumentsp, params, constrsize, src, $$method, ismethodof, body) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["rtype"] = rtype;
      this["rutype"] = rutype;
      this["rrange"] = rrange;
      this["idthis"] = idthis;
      this["idgen"] = idgen;
      this["mode"] = mode;
      this["decl"] = decl;
      this["need-bind-exit-return"] = needBindExitReturn;
      this["new-target"] = newTarget;
      this["vararg"] = vararg;
      this["name"] = name;
      this["generator"] = generator;
      this["optimize"] = optimize;
      this["thisp"] = thisp;
      this["argumentsp"] = argumentsp;
      this["params"] = params;
      this["constrsize"] = constrsize;
      this["src"] = src;
      this["method"] = $$method;
      this["ismethodof"] = ismethodof;
      this["body"] = body;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      this.rtype = 'unknown';
      this.rutype = 'unknown';
      this.rrange = undefined;
      this.idthis = 'this';
      this.idgen = false;
      this.mode = 'normal';
      this.decl = false;
      this.needBindExitReturn = false;
      this.newTarget = 'unknown';
      this.vararg = false;
      this.generator = false;
      this.optimize = true;
      this.thisp = false;
      this.argumentsp = false;
      this.params = null;
      this.constrsize = 3;
      this.src = true;
      this.$$method = false;
      this.ismethodof = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SFun";
}
J2SFun.prototype = new J2SExpr();
Object.defineProperty(J2SFun.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SFun"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "rtype":' + tojson(this["rtype"])
      + ', "rutype":' + tojson(this["rutype"])
      + ', "rrange":' + tojson(this["rrange"])
      + ', "idthis":' + tojson(this["idthis"])
      + ', "idgen":' + tojson(this["idgen"])
      + ', "mode":' + tojson(this["mode"])
      + ', "decl":' + (this.decl ? '{ "__ref__":' +  this.decl.key + '}' : false)
      + ', "need-bind-exit-return":' + tojson(this["need-bind-exit-return"])
      + ', "new-target":' + tojson(this["new-target"])
      + ', "vararg":' + tojson(this["vararg"])
      + ', "name":' + tojson(this["name"])
      + ', "generator":' + tojson(this["generator"])
      + ', "optimize":' + tojson(this["optimize"])
      + ', "thisp":' + tojson(this["thisp"])
      + ', "argumentsp":' + tojson(this["argumentsp"])
      + ', "params":' + tojson(this["params"])
      + ', "constrsize":' + tojson(this["constrsize"])
      + ', "src":' + tojson(this["src"])
      + ', "method":' + tojson(this["method"])
      + ', "ismethodof":' + tojson(this["ismethodof"])
      + ', "body":' + tojson(this["body"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SFun", J2SFun);
export function J2SSvc(loc, type, hint, range, rtype, rutype, rrange, idthis, idgen, mode, decl, needBindExitReturn, newTarget, vararg, name, generator, optimize, thisp, argumentsp, params, constrsize, src, $$method, ismethodof, body, init, path, register, $$import) {
   J2SFun.call(this, loc, type, hint, range, rtype, rutype, rrange, idthis, idgen, mode, decl, needBindExitReturn, newTarget, vararg, name, generator, optimize, thisp, argumentsp, params, constrsize, src, $$method, ismethodof, body);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["rtype"] = rtype;
      this["rutype"] = rutype;
      this["rrange"] = rrange;
      this["idthis"] = idthis;
      this["idgen"] = idgen;
      this["mode"] = mode;
      this["decl"] = decl;
      this["need-bind-exit-return"] = needBindExitReturn;
      this["new-target"] = newTarget;
      this["vararg"] = vararg;
      this["name"] = name;
      this["generator"] = generator;
      this["optimize"] = optimize;
      this["thisp"] = thisp;
      this["argumentsp"] = argumentsp;
      this["params"] = params;
      this["constrsize"] = constrsize;
      this["src"] = src;
      this["method"] = $$method;
      this["ismethodof"] = ismethodof;
      this["body"] = body;
      this["init"] = init;
      this["path"] = path;
      this["register"] = register;
      this["import"] = $$import;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      this.rtype = 'unknown';
      this.rutype = 'unknown';
      this.rrange = undefined;
      this.idthis = 'this';
      this.idgen = false;
      this.mode = 'normal';
      this.decl = false;
      this.needBindExitReturn = false;
      this.newTarget = 'unknown';
      this.vararg = false;
      this.generator = false;
      this.optimize = true;
      this.thisp = false;
      this.argumentsp = false;
      this.params = null;
      this.constrsize = 3;
      this.src = true;
      this.$$method = false;
      this.ismethodof = false;
      this.path = false;
      this.register = true;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SSvc";
}
J2SSvc.prototype = new J2SFun();
Object.defineProperty(J2SSvc.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SSvc"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "rtype":' + tojson(this["rtype"])
      + ', "rutype":' + tojson(this["rutype"])
      + ', "rrange":' + tojson(this["rrange"])
      + ', "idthis":' + tojson(this["idthis"])
      + ', "idgen":' + tojson(this["idgen"])
      + ', "mode":' + tojson(this["mode"])
      + ', "decl":' + (this.decl ? '{ "__ref__":' +  this.decl.key + '}' : false)
      + ', "need-bind-exit-return":' + tojson(this["need-bind-exit-return"])
      + ', "new-target":' + tojson(this["new-target"])
      + ', "vararg":' + tojson(this["vararg"])
      + ', "name":' + tojson(this["name"])
      + ', "generator":' + tojson(this["generator"])
      + ', "optimize":' + tojson(this["optimize"])
      + ', "thisp":' + tojson(this["thisp"])
      + ', "argumentsp":' + tojson(this["argumentsp"])
      + ', "params":' + tojson(this["params"])
      + ', "constrsize":' + tojson(this["constrsize"])
      + ', "src":' + tojson(this["src"])
      + ', "method":' + tojson(this["method"])
      + ', "ismethodof":' + tojson(this["ismethodof"])
      + ', "body":' + tojson(this["body"])
      + ', "init":' + tojson(this["init"])
      + ', "path":' + tojson(this["path"])
      + ', "register":' + tojson(this["register"])
      + ', "import":' + tojson(this["import"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SSvc", J2SSvc);
export function J2SArrow(loc, type, hint, range, rtype, rutype, rrange, idthis, idgen, mode, decl, needBindExitReturn, newTarget, vararg, name, generator, optimize, thisp, argumentsp, params, constrsize, src, $$method, ismethodof, body) {
   J2SFun.call(this, loc, type, hint, range, rtype, rutype, rrange, idthis, idgen, mode, decl, needBindExitReturn, newTarget, vararg, name, generator, optimize, thisp, argumentsp, params, constrsize, src, $$method, ismethodof, body);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["rtype"] = rtype;
      this["rutype"] = rutype;
      this["rrange"] = rrange;
      this["idthis"] = idthis;
      this["idgen"] = idgen;
      this["mode"] = mode;
      this["decl"] = decl;
      this["need-bind-exit-return"] = needBindExitReturn;
      this["new-target"] = newTarget;
      this["vararg"] = vararg;
      this["name"] = name;
      this["generator"] = generator;
      this["optimize"] = optimize;
      this["thisp"] = thisp;
      this["argumentsp"] = argumentsp;
      this["params"] = params;
      this["constrsize"] = constrsize;
      this["src"] = src;
      this["method"] = $$method;
      this["ismethodof"] = ismethodof;
      this["body"] = body;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      this.rtype = 'unknown';
      this.rutype = 'unknown';
      this.rrange = undefined;
      this.idthis = 'this';
      this.idgen = false;
      this.mode = 'normal';
      this.decl = false;
      this.needBindExitReturn = false;
      this.newTarget = 'unknown';
      this.vararg = false;
      this.generator = false;
      this.optimize = true;
      this.thisp = false;
      this.argumentsp = false;
      this.params = null;
      this.constrsize = 3;
      this.src = true;
      this.$$method = false;
      this.ismethodof = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SArrow";
}
J2SArrow.prototype = new J2SFun();
Object.defineProperty(J2SArrow.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SArrow"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "rtype":' + tojson(this["rtype"])
      + ', "rutype":' + tojson(this["rutype"])
      + ', "rrange":' + tojson(this["rrange"])
      + ', "idthis":' + tojson(this["idthis"])
      + ', "idgen":' + tojson(this["idgen"])
      + ', "mode":' + tojson(this["mode"])
      + ', "decl":' + (this.decl ? '{ "__ref__":' +  this.decl.key + '}' : false)
      + ', "need-bind-exit-return":' + tojson(this["need-bind-exit-return"])
      + ', "new-target":' + tojson(this["new-target"])
      + ', "vararg":' + tojson(this["vararg"])
      + ', "name":' + tojson(this["name"])
      + ', "generator":' + tojson(this["generator"])
      + ', "optimize":' + tojson(this["optimize"])
      + ', "thisp":' + tojson(this["thisp"])
      + ', "argumentsp":' + tojson(this["argumentsp"])
      + ', "params":' + tojson(this["params"])
      + ', "constrsize":' + tojson(this["constrsize"])
      + ', "src":' + tojson(this["src"])
      + ', "method":' + tojson(this["method"])
      + ', "ismethodof":' + tojson(this["ismethodof"])
      + ', "body":' + tojson(this["body"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SArrow", J2SArrow);
export function J2SMethod(loc, type, hint, range, $$function, $$method) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["function"] = $$function;
      this["method"] = $$method;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SMethod";
}
J2SMethod.prototype = new J2SExpr();
Object.defineProperty(J2SMethod.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SMethod"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "function":' + tojson(this["function"])
      + ', "method":' + tojson(this["method"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SMethod", J2SMethod);
export function J2SClass(loc, type, hint, range, endloc, name, decl, $$super, src, elements, constrsize, cmap, needSuperCheck, needDeadZoneCheck, methods) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["endloc"] = endloc;
      this["name"] = name;
      this["decl"] = decl;
      this["super"] = $$super;
      this["src"] = src;
      this["elements"] = elements;
      this["constrsize"] = constrsize;
      this["cmap"] = cmap;
      this["need-super-check"] = needSuperCheck;
      this["need-dead-zone-check"] = needDeadZoneCheck;
      this["methods"] = methods;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      this.decl = false;
      this.src = true;
      this.constrsize = 0;
      this.cmap = false;
      this.needSuperCheck = false;
      this.needDeadZoneCheck = false;
      this.methods = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SClass";
}
J2SClass.prototype = new J2SExpr();
Object.defineProperty(J2SClass.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SClass"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "endloc":' + tojson(this["endloc"])
      + ', "name":' + tojson(this["name"])
      + ', "decl":' + (this.decl ? '{ "__ref__":' +  this.decl.key + '}' : false)
      + ', "super":' + tojson(this["super"])
      + ', "src":' + tojson(this["src"])
      + ', "elements":' + tojson(this["elements"])
      + ', "constrsize":' + tojson(this["constrsize"])
      + ', "cmap":' + tojson(this["cmap"])
      + ', "need-super-check":' + tojson(this["need-super-check"])
      + ', "need-dead-zone-check":' + tojson(this["need-dead-zone-check"])
      + ', "methods":' + tojson(this["methods"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SClass", J2SClass);
export function J2SRecord(loc, type, hint, range, endloc, name, decl, $$super, src, elements, constrsize, cmap, needSuperCheck, needDeadZoneCheck, methods) {
   J2SClass.call(this, loc, type, hint, range, endloc, name, decl, $$super, src, elements, constrsize, cmap, needSuperCheck, needDeadZoneCheck, methods);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["endloc"] = endloc;
      this["name"] = name;
      this["decl"] = decl;
      this["super"] = $$super;
      this["src"] = src;
      this["elements"] = elements;
      this["constrsize"] = constrsize;
      this["cmap"] = cmap;
      this["need-super-check"] = needSuperCheck;
      this["need-dead-zone-check"] = needDeadZoneCheck;
      this["methods"] = methods;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      this.decl = false;
      this.src = true;
      this.constrsize = 0;
      this.cmap = false;
      this.needSuperCheck = false;
      this.needDeadZoneCheck = false;
      this.methods = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SRecord";
}
J2SRecord.prototype = new J2SClass();
Object.defineProperty(J2SRecord.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SRecord"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "endloc":' + tojson(this["endloc"])
      + ', "name":' + tojson(this["name"])
      + ', "decl":' + (this.decl ? '{ "__ref__":' +  this.decl.key + '}' : false)
      + ', "super":' + tojson(this["super"])
      + ', "src":' + tojson(this["src"])
      + ', "elements":' + tojson(this["elements"])
      + ', "constrsize":' + tojson(this["constrsize"])
      + ', "cmap":' + tojson(this["cmap"])
      + ', "need-super-check":' + tojson(this["need-super-check"])
      + ', "need-dead-zone-check":' + tojson(this["need-dead-zone-check"])
      + ', "methods":' + tojson(this["methods"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SRecord", J2SRecord);
export function J2SClassElement(loc, $$static, prop, type, clazz, index, rtwin, usage, hint) {
   J2SNode.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["static"] = $$static;
      this["prop"] = prop;
      this["type"] = type;
      this["clazz"] = clazz;
      this["index"] = index;
      this["rtwin"] = rtwin;
      this["usage"] = usage;
      this["hint"] = hint;
   } else {
      this.type = 'any';
      this.clazz = false;
      this.index = -1;
      this.rtwin = false;
      this.usage = ~~0;
      this.hint = null;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SClassElement";
}
J2SClassElement.prototype = new J2SNode();
Object.defineProperty(J2SClassElement.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SClassElement"'
      + ', "loc":' + tojson(this["loc"])
      + ', "static":' + tojson(this["static"])
      + ', "prop":' + tojson(this["prop"])
      + ', "type":' + tojson(this["type"])
      + ', "clazz":' + tojson(this["clazz"])
      + ', "index":' + tojson(this["index"])
      + ', "rtwin":' + tojson(this["rtwin"])
      + ', "usage":' + tojson(this["usage"])
      + ', "hint":' + tojson(this["hint"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SClassElement", J2SClassElement);
export function J2SCatch(loc, param, body) {
   J2SStmt.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["param"] = param;
      this["body"] = body;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "J2SCatch";
}
J2SCatch.prototype = new J2SStmt();
Object.defineProperty(J2SCatch.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SCatch"'
      + ', "loc":' + tojson(this["loc"])
      + ', "param":' + tojson(this["param"])
      + ', "body":' + tojson(this["body"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SCatch", J2SCatch);
export function J2STry(loc, body, $$catch, $$finally) {
   J2SStmt.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["body"] = body;
      this["catch"] = $$catch;
      this["finally"] = $$finally;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "J2STry";
}
J2STry.prototype = new J2SStmt();
Object.defineProperty(J2STry.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2STry"'
      + ', "loc":' + tojson(this["loc"])
      + ', "body":' + tojson(this["body"])
      + ', "catch":' + tojson(this["catch"])
      + ', "finally":' + tojson(this["finally"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2STry", J2STry);
export function J2SPragma(loc, type, hint, range, lang, vars, vals, expr) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["lang"] = lang;
      this["vars"] = vars;
      this["vals"] = vals;
      this["expr"] = expr;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      this.lang = 'scheme';
      this.vars = null;
      this.vals = null;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SPragma";
}
J2SPragma.prototype = new J2SExpr();
Object.defineProperty(J2SPragma.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SPragma"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "lang":' + tojson(this["lang"])
      + ', "vars":' + tojson(this["vars"])
      + ', "vals":' + tojson(this["vals"])
      + ', "expr":' + tojson(this["expr"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SPragma", J2SPragma);
export function J2SSequence(loc, type, hint, range, exprs) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["exprs"] = exprs;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SSequence";
}
J2SSequence.prototype = new J2SExpr();
Object.defineProperty(J2SSequence.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SSequence"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "exprs":' + tojson(this["exprs"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SSequence", J2SSequence);
export function J2SUnresolvedRef(loc, type, hint, range, cache, id) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["cache"] = cache;
      this["id"] = id;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      this.cache = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SUnresolvedRef";
}
J2SUnresolvedRef.prototype = new J2SExpr();
Object.defineProperty(J2SUnresolvedRef.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SUnresolvedRef"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "cache":' + tojson(this["cache"])
      + ', "id":' + tojson(this["id"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SUnresolvedRef", J2SUnresolvedRef);
export function J2SGlobalRef(loc, type, hint, range, cache, id, decl) {
   J2SUnresolvedRef.call(this, loc, type, hint, range, cache, id);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["cache"] = cache;
      this["id"] = id;
      this["decl"] = decl;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      this.cache = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SGlobalRef";
}
J2SGlobalRef.prototype = new J2SUnresolvedRef();
Object.defineProperty(J2SGlobalRef.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SGlobalRef"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "cache":' + tojson(this["cache"])
      + ', "id":' + tojson(this["id"])
      + ', "decl":' + (this.decl ? '{ "__ref__":' +  this.decl.key + '}' : false)
      + '}';
}, enumerable: false }); 
registerWrapper("J2SGlobalRef", J2SGlobalRef);
export function J2SRef(loc, type, hint, range, decl) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["decl"] = decl;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SRef";
}
J2SRef.prototype = new J2SExpr();
Object.defineProperty(J2SRef.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SRef"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "decl":' + (this.decl ? '{ "__ref__":' +  this.decl.key + '}' : false)
      + '}';
}, enumerable: false }); 
registerWrapper("J2SRef", J2SRef);
export function J2SWithRef(loc, type, hint, range, id, withs, expr) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["id"] = id;
      this["withs"] = withs;
      this["expr"] = expr;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SWithRef";
}
J2SWithRef.prototype = new J2SExpr();
Object.defineProperty(J2SWithRef.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SWithRef"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "id":' + tojson(this["id"])
      + ', "withs":' + tojson(this["withs"])
      + ', "expr":' + tojson(this["expr"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SWithRef", J2SWithRef);
export function J2SHopRef(loc, type, hint, range, id, rtype, module) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["id"] = id;
      this["rtype"] = rtype;
      this["module"] = module;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      this.rtype = 'any';
      this.module = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SHopRef";
}
J2SHopRef.prototype = new J2SExpr();
Object.defineProperty(J2SHopRef.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SHopRef"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "id":' + tojson(this["id"])
      + ', "rtype":' + tojson(this["rtype"])
      + ', "module":' + tojson(this["module"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SHopRef", J2SHopRef);
export function J2SLetRef(loc, type, hint, range, decl) {
   J2SRef.call(this, loc, type, hint, range, decl);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["decl"] = decl;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SLetRef";
}
J2SLetRef.prototype = new J2SRef();
Object.defineProperty(J2SLetRef.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SLetRef"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "decl":' + (this.decl ? '{ "__ref__":' +  this.decl.key + '}' : false)
      + '}';
}, enumerable: false }); 
registerWrapper("J2SLetRef", J2SLetRef);
export function J2SAref(loc, type, hint, range, decl, array, alen, amark, deps) {
   J2SRef.call(this, loc, type, hint, range, decl);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["decl"] = decl;
      this["array"] = array;
      this["alen"] = alen;
      this["amark"] = amark;
      this["deps"] = deps;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SAref";
}
J2SAref.prototype = new J2SRef();
Object.defineProperty(J2SAref.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SAref"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "decl":' + (this.decl ? '{ "__ref__":' +  this.decl.key + '}' : false)
      + ', "array":' + tojson(this["array"])
      + ', "alen":' + tojson(this["alen"])
      + ', "amark":' + tojson(this["amark"])
      + ', "deps":' + tojson(this["deps"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SAref", J2SAref);
export function J2SKontRef(loc, type, hint, range, gen, index, id) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["gen"] = gen;
      this["index"] = index;
      this["id"] = id;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SKontRef";
}
J2SKontRef.prototype = new J2SExpr();
Object.defineProperty(J2SKontRef.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SKontRef"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "gen":' + tojson(this["gen"])
      + ', "index":' + tojson(this["index"])
      + ', "id":' + tojson(this["id"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SKontRef", J2SKontRef);
export function J2SThis(loc, type, hint, range, decl) {
   J2SRef.call(this, loc, type, hint, range, decl);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["decl"] = decl;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SThis";
}
J2SThis.prototype = new J2SRef();
Object.defineProperty(J2SThis.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SThis"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "decl":' + (this.decl ? '{ "__ref__":' +  this.decl.key + '}' : false)
      + '}';
}, enumerable: false }); 
registerWrapper("J2SThis", J2SThis);
export function J2SSuper(loc, type, hint, range, decl, rtwinp, $$super, context) {
   J2SRef.call(this, loc, type, hint, range, decl);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["decl"] = decl;
      this["rtwinp"] = rtwinp;
      this["super"] = $$super;
      this["context"] = context;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      this.rtwinp = false;
      this.$$super = false;
      this.context = 'plain';
      Object.assign(this, loc);
   }
   this.__node__ = "J2SSuper";
}
J2SSuper.prototype = new J2SRef();
Object.defineProperty(J2SSuper.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SSuper"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "decl":' + (this.decl ? '{ "__ref__":' +  this.decl.key + '}' : false)
      + ', "rtwinp":' + tojson(this["rtwinp"])
      + ', "super":' + tojson(this["super"])
      + ', "context":' + tojson(this["context"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SSuper", J2SSuper);
export function J2SCond(loc, type, hint, range, test, then, $$else) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["test"] = test;
      this["then"] = then;
      this["else"] = $$else;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SCond";
}
J2SCond.prototype = new J2SExpr();
Object.defineProperty(J2SCond.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SCond"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "test":' + tojson(this["test"])
      + ', "then":' + tojson(this["then"])
      + ', "else":' + tojson(this["else"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SCond", J2SCond);
export function J2SLiteral(loc, type, hint, range) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SLiteral";
}
J2SLiteral.prototype = new J2SExpr();
Object.defineProperty(J2SLiteral.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SLiteral"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SLiteral", J2SLiteral);
export function J2SArrayAbsent(loc, type, hint, range) {
   J2SLiteral.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SArrayAbsent";
}
J2SArrayAbsent.prototype = new J2SLiteral();
Object.defineProperty(J2SArrayAbsent.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SArrayAbsent"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SArrayAbsent", J2SArrayAbsent);
export function J2SNull(loc, type, hint, range) {
   J2SLiteral.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SNull";
}
J2SNull.prototype = new J2SLiteral();
Object.defineProperty(J2SNull.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SNull"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SNull", J2SNull);
export function J2SUndefined(loc, type, hint, range) {
   J2SLiteral.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SUndefined";
}
J2SUndefined.prototype = new J2SLiteral();
Object.defineProperty(J2SUndefined.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SUndefined"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SUndefined", J2SUndefined);
export function J2SLiteralValue(loc, type, hint, range, val) {
   J2SLiteral.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["val"] = val;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SLiteralValue";
}
J2SLiteralValue.prototype = new J2SLiteral();
Object.defineProperty(J2SLiteralValue.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SLiteralValue"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "val":' + tojson(this["val"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SLiteralValue", J2SLiteralValue);
export function J2SNativeString(loc, type, hint, range, val) {
   J2SLiteralValue.call(this, loc, type, hint, range, val);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["val"] = val;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SNativeString";
}
J2SNativeString.prototype = new J2SLiteralValue();
Object.defineProperty(J2SNativeString.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SNativeString"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "val":' + tojson(this["val"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SNativeString", J2SNativeString);
export function J2SString(loc, type, hint, range, val, escape, $$private) {
   J2SLiteralValue.call(this, loc, type, hint, range, val);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["val"] = val;
      this["escape"] = escape;
      this["private"] = $$private;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      this.escape = null;
      this.$$private = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SString";
}
J2SString.prototype = new J2SLiteralValue();
Object.defineProperty(J2SString.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SString"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "val":' + tojson(this["val"])
      + ', "escape":' + tojson(this["escape"])
      + ', "private":' + tojson(this["private"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SString", J2SString);
export function J2SBool(loc, type, hint, range, val) {
   J2SLiteralValue.call(this, loc, type, hint, range, val);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["val"] = val;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SBool";
}
J2SBool.prototype = new J2SLiteralValue();
Object.defineProperty(J2SBool.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SBool"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "val":' + tojson(this["val"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SBool", J2SBool);
export function J2SNumber(loc, type, hint, range, val) {
   J2SLiteralValue.call(this, loc, type, hint, range, val);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["val"] = val;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SNumber";
}
J2SNumber.prototype = new J2SLiteralValue();
Object.defineProperty(J2SNumber.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SNumber"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "val":' + tojson(this["val"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SNumber", J2SNumber);
export function J2SOctalNumber(loc, type, hint, range, val) {
   J2SNumber.call(this, loc, type, hint, range, val);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["val"] = val;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SOctalNumber";
}
J2SOctalNumber.prototype = new J2SNumber();
Object.defineProperty(J2SOctalNumber.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SOctalNumber"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "val":' + tojson(this["val"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SOctalNumber", J2SOctalNumber);
export function J2SRegExp(loc, type, hint, range, val, flags, inline) {
   J2SLiteralValue.call(this, loc, type, hint, range, val);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["val"] = val;
      this["flags"] = flags;
      this["inline"] = inline;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      this.inline = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SRegExp";
}
J2SRegExp.prototype = new J2SLiteralValue();
Object.defineProperty(J2SRegExp.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SRegExp"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "val":' + tojson(this["val"])
      + ', "flags":' + tojson(this["flags"])
      + ', "inline":' + tojson(this["inline"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SRegExp", J2SRegExp);
export function J2SCmap(loc, type, hint, range, val, ctor) {
   J2SLiteralValue.call(this, loc, type, hint, range, val);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["val"] = val;
      this["ctor"] = ctor;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      this.ctor = true;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SCmap";
}
J2SCmap.prototype = new J2SLiteralValue();
Object.defineProperty(J2SCmap.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SCmap"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "val":' + tojson(this["val"])
      + ', "ctor":' + tojson(this["ctor"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SCmap", J2SCmap);
export function J2SLiteralCnst(loc, type, hint, range, index, val) {
   J2SLiteral.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["index"] = index;
      this["val"] = val;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SLiteralCnst";
}
J2SLiteralCnst.prototype = new J2SLiteral();
Object.defineProperty(J2SLiteralCnst.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SLiteralCnst"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "index":' + tojson(this["index"])
      + ', "val":' + tojson(this["val"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SLiteralCnst", J2SLiteralCnst);
export function J2SArray(loc, type, hint, range, len, exprs) {
   J2SLiteral.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["len"] = len;
      this["exprs"] = exprs;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SArray";
}
J2SArray.prototype = new J2SLiteral();
Object.defineProperty(J2SArray.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SArray"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "len":' + tojson(this["len"])
      + ', "exprs":' + tojson(this["exprs"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SArray", J2SArray);
export function J2SSpread(loc, type, hint, range, stype, expr) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["stype"] = stype;
      this["expr"] = expr;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SSpread";
}
J2SSpread.prototype = new J2SExpr();
Object.defineProperty(J2SSpread.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SSpread"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "stype":' + tojson(this["stype"])
      + ', "expr":' + tojson(this["expr"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SSpread", J2SSpread);
export function J2STemplate(loc, type, hint, range, exprs) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["exprs"] = exprs;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2STemplate";
}
J2STemplate.prototype = new J2SExpr();
Object.defineProperty(J2STemplate.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2STemplate"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "exprs":' + tojson(this["exprs"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2STemplate", J2STemplate);
export function J2SParen(loc, type, hint, range, expr) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["expr"] = expr;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SParen";
}
J2SParen.prototype = new J2SExpr();
Object.defineProperty(J2SParen.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SParen"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "expr":' + tojson(this["expr"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SParen", J2SParen);
export function J2SUnary(loc, type, hint, range, op, expr) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["op"] = op;
      this["expr"] = expr;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SUnary";
}
J2SUnary.prototype = new J2SExpr();
Object.defineProperty(J2SUnary.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SUnary"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "op":' + tojson(this["op"])
      + ', "expr":' + tojson(this["expr"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SUnary", J2SUnary);
export function J2SBinary(loc, type, hint, range, op, lhs, rhs) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["op"] = op;
      this["lhs"] = lhs;
      this["rhs"] = rhs;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SBinary";
}
J2SBinary.prototype = new J2SExpr();
Object.defineProperty(J2SBinary.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SBinary"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "op":' + tojson(this["op"])
      + ', "lhs":' + tojson(this["lhs"])
      + ', "rhs":' + tojson(this["rhs"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SBinary", J2SBinary);
export function J2SAssig(loc, type, hint, range, lhs, rhs) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["lhs"] = lhs;
      this["rhs"] = rhs;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SAssig";
}
J2SAssig.prototype = new J2SExpr();
Object.defineProperty(J2SAssig.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SAssig"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "lhs":' + tojson(this["lhs"])
      + ', "rhs":' + tojson(this["rhs"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SAssig", J2SAssig);
export function J2SInit(loc, type, hint, range, lhs, rhs) {
   J2SAssig.call(this, loc, type, hint, range, lhs, rhs);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["lhs"] = lhs;
      this["rhs"] = rhs;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SInit";
}
J2SInit.prototype = new J2SAssig();
Object.defineProperty(J2SInit.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SInit"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "lhs":' + tojson(this["lhs"])
      + ', "rhs":' + tojson(this["rhs"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SInit", J2SInit);
export function J2SFunBinding(loc, type, hint, range, lhs, rhs) {
   J2SInit.call(this, loc, type, hint, range, lhs, rhs);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["lhs"] = lhs;
      this["rhs"] = rhs;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SFunBinding";
}
J2SFunBinding.prototype = new J2SInit();
Object.defineProperty(J2SFunBinding.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SFunBinding"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "lhs":' + tojson(this["lhs"])
      + ', "rhs":' + tojson(this["rhs"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SFunBinding", J2SFunBinding);
export function J2SPrefix(loc, type, hint, range, lhs, rhs, op) {
   J2SAssig.call(this, loc, type, hint, range, lhs, rhs);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["lhs"] = lhs;
      this["rhs"] = rhs;
      this["op"] = op;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SPrefix";
}
J2SPrefix.prototype = new J2SAssig();
Object.defineProperty(J2SPrefix.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SPrefix"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "lhs":' + tojson(this["lhs"])
      + ', "rhs":' + tojson(this["rhs"])
      + ', "op":' + tojson(this["op"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SPrefix", J2SPrefix);
export function J2SPostfix(loc, type, hint, range, lhs, rhs, op) {
   J2SAssig.call(this, loc, type, hint, range, lhs, rhs);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["lhs"] = lhs;
      this["rhs"] = rhs;
      this["op"] = op;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SPostfix";
}
J2SPostfix.prototype = new J2SAssig();
Object.defineProperty(J2SPostfix.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SPostfix"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "lhs":' + tojson(this["lhs"])
      + ', "rhs":' + tojson(this["rhs"])
      + ', "op":' + tojson(this["op"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SPostfix", J2SPostfix);
export function J2SAssigOp(loc, type, hint, range, lhs, rhs, op) {
   J2SAssig.call(this, loc, type, hint, range, lhs, rhs);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["lhs"] = lhs;
      this["rhs"] = rhs;
      this["op"] = op;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SAssigOp";
}
J2SAssigOp.prototype = new J2SAssig();
Object.defineProperty(J2SAssigOp.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SAssigOp"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "lhs":' + tojson(this["lhs"])
      + ', "rhs":' + tojson(this["rhs"])
      + ', "op":' + tojson(this["op"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SAssigOp", J2SAssigOp);
export function J2SObjInit(loc, type, hint, range, inits, cmap, ronly) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["inits"] = inits;
      this["cmap"] = cmap;
      this["ronly"] = ronly;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      this.cmap = false;
      this.ronly = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SObjInit";
}
J2SObjInit.prototype = new J2SExpr();
Object.defineProperty(J2SObjInit.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SObjInit"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "inits":' + tojson(this["inits"])
      + ', "cmap":' + tojson(this["cmap"])
      + ', "ronly":' + tojson(this["ronly"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SObjInit", J2SObjInit);
export function J2SAccess(loc, type, hint, range, obj, field) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["obj"] = obj;
      this["field"] = field;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SAccess";
}
J2SAccess.prototype = new J2SExpr();
Object.defineProperty(J2SAccess.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SAccess"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "obj":' + tojson(this["obj"])
      + ', "field":' + tojson(this["field"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SAccess", J2SAccess);
export function J2SCacheCheck(loc, type, hint, range, prop, cache, owner, obj, fields) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["prop"] = prop;
      this["cache"] = cache;
      this["owner"] = owner;
      this["obj"] = obj;
      this["fields"] = fields;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SCacheCheck";
}
J2SCacheCheck.prototype = new J2SExpr();
Object.defineProperty(J2SCacheCheck.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SCacheCheck"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "prop":' + tojson(this["prop"])
      + ', "cache":' + tojson(this["cache"])
      + ', "owner":' + tojson(this["owner"])
      + ', "obj":' + tojson(this["obj"])
      + ', "fields":' + tojson(this["fields"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SCacheCheck", J2SCacheCheck);
export function J2SCacheUpdate(loc, type, hint, range, prop, cache, obj) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["prop"] = prop;
      this["cache"] = cache;
      this["obj"] = obj;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SCacheUpdate";
}
J2SCacheUpdate.prototype = new J2SExpr();
Object.defineProperty(J2SCacheUpdate.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SCacheUpdate"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "prop":' + tojson(this["prop"])
      + ', "cache":' + tojson(this["cache"])
      + ', "obj":' + tojson(this["obj"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SCacheUpdate", J2SCacheUpdate);
export function J2SCall(loc, type, hint, range, profid, fun, protocol, thisargs, args) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["profid"] = profid;
      this["fun"] = fun;
      this["protocol"] = protocol;
      this["thisargs"] = thisargs;
      this["args"] = args;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      this.profid = -1;
      this.protocol = 'direct';
      this.args = null;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SCall";
}
J2SCall.prototype = new J2SExpr();
Object.defineProperty(J2SCall.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SCall"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "profid":' + tojson(this["profid"])
      + ', "fun":' + tojson(this["fun"])
      + ', "protocol":' + tojson(this["protocol"])
      + ', "thisargs":' + tojson(this["thisargs"])
      + ', "args":' + tojson(this["args"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SCall", J2SCall);
export function J2STilde(loc, type, hint, range, stmt) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["stmt"] = stmt;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2STilde";
}
J2STilde.prototype = new J2SExpr();
Object.defineProperty(J2STilde.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2STilde"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "stmt":' + tojson(this["stmt"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2STilde", J2STilde);
export function J2SDollar(loc, type, hint, range, node) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["node"] = node;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SDollar";
}
J2SDollar.prototype = new J2SExpr();
Object.defineProperty(J2SDollar.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SDollar"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "node":' + tojson(this["node"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SDollar", J2SDollar);
export function J2SNew(loc, type, hint, range, caches, clazz, protocol, args) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["caches"] = caches;
      this["clazz"] = clazz;
      this["protocol"] = protocol;
      this["args"] = args;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      this.caches = null;
      this.protocol = 'direct';
      Object.assign(this, loc);
   }
   this.__node__ = "J2SNew";
}
J2SNew.prototype = new J2SExpr();
Object.defineProperty(J2SNew.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SNew"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "caches":' + tojson(this["caches"])
      + ', "clazz":' + tojson(this["clazz"])
      + ', "protocol":' + tojson(this["protocol"])
      + ', "args":' + tojson(this["args"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SNew", J2SNew);
export function J2SPropertyInit(loc, name) {
   J2SNode.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["name"] = name;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "J2SPropertyInit";
}
J2SPropertyInit.prototype = new J2SNode();
Object.defineProperty(J2SPropertyInit.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SPropertyInit"'
      + ', "loc":' + tojson(this["loc"])
      + ', "name":' + tojson(this["name"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SPropertyInit", J2SPropertyInit);
export function J2SDataPropertyInit(loc, name, val) {
   J2SPropertyInit.call(this, loc, name);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["name"] = name;
      this["val"] = val;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "J2SDataPropertyInit";
}
J2SDataPropertyInit.prototype = new J2SPropertyInit();
Object.defineProperty(J2SDataPropertyInit.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SDataPropertyInit"'
      + ', "loc":' + tojson(this["loc"])
      + ', "name":' + tojson(this["name"])
      + ', "val":' + tojson(this["val"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SDataPropertyInit", J2SDataPropertyInit);
export function J2SMethodPropertyInit(loc, name, val, inlinecachevar) {
   J2SDataPropertyInit.call(this, loc, name, val);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["name"] = name;
      this["val"] = val;
      this["inlinecachevar"] = inlinecachevar;
   } else {
      this.inlinecachevar = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SMethodPropertyInit";
}
J2SMethodPropertyInit.prototype = new J2SDataPropertyInit();
Object.defineProperty(J2SMethodPropertyInit.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SMethodPropertyInit"'
      + ', "loc":' + tojson(this["loc"])
      + ', "name":' + tojson(this["name"])
      + ', "val":' + tojson(this["val"])
      + ', "inlinecachevar":' + tojson(this["inlinecachevar"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SMethodPropertyInit", J2SMethodPropertyInit);
export function J2SAccessorPropertyInit(loc, name, get, set) {
   J2SPropertyInit.call(this, loc, name);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["name"] = name;
      this["get"] = get;
      this["set"] = set;
   } else {
      this.get = false;
      this.set = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SAccessorPropertyInit";
}
J2SAccessorPropertyInit.prototype = new J2SPropertyInit();
Object.defineProperty(J2SAccessorPropertyInit.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SAccessorPropertyInit"'
      + ', "loc":' + tojson(this["loc"])
      + ', "name":' + tojson(this["name"])
      + ', "get":' + tojson(this["get"])
      + ', "set":' + tojson(this["set"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SAccessorPropertyInit", J2SAccessorPropertyInit);
export function J2SKont(loc, type, hint, range, param, exn, body) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["param"] = param;
      this["exn"] = exn;
      this["body"] = body;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SKont";
}
J2SKont.prototype = new J2SExpr();
Object.defineProperty(J2SKont.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SKont"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "param":' + tojson(this["param"])
      + ', "exn":' + tojson(this["exn"])
      + ', "body":' + tojson(this["body"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SKont", J2SKont);
export function J2SOPTInitSeq(loc, nodes, ref, cmap, cache, offset, cnt) {
   J2SSeq.call(this, loc, nodes);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["nodes"] = nodes;
      this["ref"] = ref;
      this["cmap"] = cmap;
      this["cache"] = cache;
      this["offset"] = offset;
      this["cnt"] = cnt;
   } else {
      this.cache = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SOPTInitSeq";
}
J2SOPTInitSeq.prototype = new J2SSeq();
Object.defineProperty(J2SOPTInitSeq.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SOPTInitSeq"'
      + ', "loc":' + tojson(this["loc"])
      + ', "nodes":' + tojson(this["nodes"])
      + ', "ref":' + tojson(this["ref"])
      + ', "cmap":' + tojson(this["cmap"])
      + ', "cache":' + tojson(this["cache"])
      + ', "offset":' + tojson(this["offset"])
      + ', "cnt":' + tojson(this["cnt"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SOPTInitSeq", J2SOPTInitSeq);
export function J2SDProducer(loc, type, hint, range, decl, expr, size) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["decl"] = decl;
      this["expr"] = expr;
      this["size"] = size;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SDProducer";
}
J2SDProducer.prototype = new J2SExpr();
Object.defineProperty(J2SDProducer.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SDProducer"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "decl":' + (this.decl ? '{ "__ref__":' +  this.decl.key + '}' : false)
      + ', "expr":' + tojson(this["expr"])
      + ', "size":' + tojson(this["size"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SDProducer", J2SDProducer);
export function J2SDConsumer(loc, type, hint, range, decl, expr, path) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["decl"] = decl;
      this["expr"] = expr;
      this["path"] = path;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SDConsumer";
}
J2SDConsumer.prototype = new J2SExpr();
Object.defineProperty(J2SDConsumer.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SDConsumer"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "decl":' + (this.decl ? '{ "__ref__":' +  this.decl.key + '}' : false)
      + ', "expr":' + tojson(this["expr"])
      + ', "path":' + tojson(this["path"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SDConsumer", J2SDConsumer);
export function J2SExport(loc, id, alias) {
   J2SStmt.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["id"] = id;
      this["alias"] = alias;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "J2SExport";
}
J2SExport.prototype = new J2SStmt();
Object.defineProperty(J2SExport.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SExport"'
      + ', "loc":' + tojson(this["loc"])
      + ', "id":' + tojson(this["id"])
      + ', "alias":' + tojson(this["alias"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SExport", J2SExport);
export function J2SExportDefault(loc, id, alias, expr) {
   J2SExport.call(this, loc, id, alias);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["id"] = id;
      this["alias"] = alias;
      this["expr"] = expr;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "J2SExportDefault";
}
J2SExportDefault.prototype = new J2SExport();
Object.defineProperty(J2SExportDefault.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SExportDefault"'
      + ', "loc":' + tojson(this["loc"])
      + ', "id":' + tojson(this["id"])
      + ', "alias":' + tojson(this["alias"])
      + ', "expr":' + tojson(this["expr"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SExportDefault", J2SExportDefault);
export function J2SRedirect(loc, id, alias, $$export, $$import) {
   J2SExport.call(this, loc, id, alias);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["id"] = id;
      this["alias"] = alias;
      this["export"] = $$export;
      this["import"] = $$import;
   } else {
      this.$$export = false;
      this.$$import = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SRedirect";
}
J2SRedirect.prototype = new J2SExport();
Object.defineProperty(J2SRedirect.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SRedirect"'
      + ', "loc":' + tojson(this["loc"])
      + ', "id":' + tojson(this["id"])
      + ', "alias":' + tojson(this["alias"])
      + ', "export":' + tojson(this["export"])
      + ', "import":' + tojson(this["import"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SRedirect", J2SRedirect);
export function J2SRedirectNamespace(loc, id, alias, $$export, $$import) {
   J2SRedirect.call(this, loc, id, alias, $$export, $$import);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["id"] = id;
      this["alias"] = alias;
      this["export"] = $$export;
      this["import"] = $$import;
   } else {
      this.$$export = false;
      this.$$import = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SRedirectNamespace";
}
J2SRedirectNamespace.prototype = new J2SRedirect();
Object.defineProperty(J2SRedirectNamespace.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SRedirectNamespace"'
      + ', "loc":' + tojson(this["loc"])
      + ', "id":' + tojson(this["id"])
      + ', "alias":' + tojson(this["alias"])
      + ', "export":' + tojson(this["export"])
      + ', "import":' + tojson(this["import"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SRedirectNamespace", J2SRedirectNamespace);
export function J2SImportPath(loc, name, abspath, path, protocol, index, $$import) {
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["name"] = name;
      this["abspath"] = abspath;
      this["path"] = path;
      this["protocol"] = protocol;
      this["index"] = index;
      this["import"] = $$import;
   } else {
      this.index = -9997;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SImportPath";
}
Object.defineProperty(J2SImportPath.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SImportPath"'
      + ', "loc":' + tojson(this["loc"])
      + ', "name":' + tojson(this["name"])
      + ', "abspath":' + tojson(this["abspath"])
      + ', "path":' + tojson(this["path"])
      + ', "protocol":' + tojson(this["protocol"])
      + ', "index":' + tojson(this["index"])
      + ', "import":' + tojson(this["import"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SImportPath", J2SImportPath);
export function J2SImport(loc, path, ipath, dollarpath, names, iprgm, lang, types) {
   J2SStmt.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["path"] = path;
      this["ipath"] = ipath;
      this["dollarpath"] = dollarpath;
      this["names"] = names;
      this["iprgm"] = iprgm;
      this["lang"] = lang;
      this["types"] = types;
   } else {
      this.ipath = false;
      this.names = null;
      this.iprgm = false;
      this.lang = false;
      this.types = false;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SImport";
}
J2SImport.prototype = new J2SStmt();
Object.defineProperty(J2SImport.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SImport"'
      + ', "loc":' + tojson(this["loc"])
      + ', "path":' + tojson(this["path"])
      + ', "ipath":' + tojson(this["ipath"])
      + ', "dollarpath":' + tojson(this["dollarpath"])
      + ', "names":' + tojson(this["names"])
      + ', "iprgm":' + tojson(this["iprgm"])
      + ', "lang":' + tojson(this["lang"])
      + ', "types":' + tojson(this["types"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SImport", J2SImport);
export function J2SImportName(loc, id, alias) {
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["id"] = id;
      this["alias"] = alias;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "J2SImportName";
}
Object.defineProperty(J2SImportName.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SImportName"'
      + ', "loc":' + tojson(this["loc"])
      + ', "id":' + tojson(this["id"])
      + ', "alias":' + tojson(this["alias"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SImportName", J2SImportName);
export function J2SImportNamespace(loc, type, hint, range, id, $$import) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["id"] = id;
      this["import"] = $$import;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      Object.assign(this, loc);
   }
   this.__node__ = "J2SImportNamespace";
}
J2SImportNamespace.prototype = new J2SExpr();
Object.defineProperty(J2SImportNamespace.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SImportNamespace"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "id":' + tojson(this["id"])
      + ', "import":' + tojson(this["import"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SImportNamespace", J2SImportNamespace);
export function J2SImportDynamic(loc, type, hint, range, promise, base, path) {
   J2SExpr.call(this, loc, type, hint, range);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["type"] = type;
      this["hint"] = hint;
      this["range"] = range;
      this["promise"] = promise;
      this["base"] = base;
      this["path"] = path;
   } else {
      this.type = 'unknown';
      this.hint = null;
      this.range = undefined;
      this.promise = true;
      this.base = "/home/serrano/prgm/project/hop/hop/node_modules/hopc/hop";
      Object.assign(this, loc);
   }
   this.__node__ = "J2SImportDynamic";
}
J2SImportDynamic.prototype = new J2SExpr();
Object.defineProperty(J2SImportDynamic.prototype, 'tojson', { value: function() {
   return '{ "__node__": "J2SImportDynamic"'
      + ', "loc":' + tojson(this["loc"])
      + ', "type":' + tojson(this["type"])
      + ', "hint":' + tojson(this["hint"])
      + ', "range":' + tojson(this["range"])
      + ', "promise":' + tojson(this["promise"])
      + ', "base":' + tojson(this["base"])
      + ', "path":' + tojson(this["path"])
      + '}';
}, enumerable: false }); 
registerWrapper("J2SImportDynamic", J2SImportDynamic);
export function TsInterface(loc, id, decl, properties) {
   J2SNode.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["id"] = id;
      this["decl"] = decl;
      this["properties"] = properties;
   } else {
      this.id = false;
      this.decl = false;
      Object.assign(this, loc);
   }
   this.__node__ = "TsInterface";
}
TsInterface.prototype = new J2SNode();
Object.defineProperty(TsInterface.prototype, 'tojson', { value: function() {
   return '{ "__node__": "TsInterface"'
      + ', "loc":' + tojson(this["loc"])
      + ', "id":' + tojson(this["id"])
      + ', "decl":' + tojson(this["decl"])
      + ', "properties":' + tojson(this["properties"])
      + '}';
}, enumerable: false }); 
registerWrapper("TsInterface", TsInterface);
export function TsInterfaceProperty(loc, name, optional, type) {
   J2SNode.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["name"] = name;
      this["optional"] = optional;
      this["type"] = type;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "TsInterfaceProperty";
}
TsInterfaceProperty.prototype = new J2SNode();
Object.defineProperty(TsInterfaceProperty.prototype, 'tojson', { value: function() {
   return '{ "__node__": "TsInterfaceProperty"'
      + ', "loc":' + tojson(this["loc"])
      + ', "name":' + tojson(this["name"])
      + ', "optional":' + tojson(this["optional"])
      + ', "type":' + tojson(this["type"])
      + '}';
}, enumerable: false }); 
registerWrapper("TsInterfaceProperty", TsInterfaceProperty);
export function TsInterfacePropertyName(loc, fakename, type) {
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["fakename"] = fakename;
      this["type"] = type;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "TsInterfacePropertyName";
}
Object.defineProperty(TsInterfacePropertyName.prototype, 'tojson', { value: function() {
   return '{ "__node__": "TsInterfacePropertyName"'
      + ', "loc":' + tojson(this["loc"])
      + ', "fakename":' + tojson(this["fakename"])
      + ', "type":' + tojson(this["type"])
      + '}';
}, enumerable: false }); 
registerWrapper("TsInterfacePropertyName", TsInterfacePropertyName);
export function TsType(loc) {
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "TsType";
}
Object.defineProperty(TsType.prototype, 'tojson', { value: function() {
   return '{ "__node__": "TsType"'
      + ', "loc":' + tojson(this["loc"])
      + '}';
}, enumerable: false }); 
registerWrapper("TsType", TsType);
export function TsTypeArray(loc, of) {
   TsType.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["of"] = of;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "TsTypeArray";
}
TsTypeArray.prototype = new TsType();
Object.defineProperty(TsTypeArray.prototype, 'tojson', { value: function() {
   return '{ "__node__": "TsTypeArray"'
      + ', "loc":' + tojson(this["loc"])
      + ', "of":' + tojson(this["of"])
      + '}';
}, enumerable: false }); 
registerWrapper("TsTypeArray", TsTypeArray);
export function TsTypeFunction(loc, range, domain) {
   TsType.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["range"] = range;
      this["domain"] = domain;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "TsTypeFunction";
}
TsTypeFunction.prototype = new TsType();
Object.defineProperty(TsTypeFunction.prototype, 'tojson', { value: function() {
   return '{ "__node__": "TsTypeFunction"'
      + ', "loc":' + tojson(this["loc"])
      + ', "range":' + tojson(this["range"])
      + ', "domain":' + tojson(this["domain"])
      + '}';
}, enumerable: false }); 
registerWrapper("TsTypeFunction", TsTypeFunction);
export function TsTypeBinary(loc, op, lhs, rhs) {
   TsType.call(this, loc);
   if (typeof loc !== "object" || !("loc" in loc)) {
      this["loc"] = loc;
      this["op"] = op;
      this["lhs"] = lhs;
      this["rhs"] = rhs;
   } else {
      Object.assign(this, loc);
   }
   this.__node__ = "TsTypeBinary";
}
TsTypeBinary.prototype = new TsType();
Object.defineProperty(TsTypeBinary.prototype, 'tojson', { value: function() {
   return '{ "__node__": "TsTypeBinary"'
      + ', "loc":' + tojson(this["loc"])
      + ', "op":' + tojson(this["op"])
      + ', "lhs":' + tojson(this["lhs"])
      + ', "rhs":' + tojson(this["rhs"])
      + '}';
}, enumerable: false }); 
registerWrapper("TsTypeBinary", TsTypeBinary);

/*---------------------------------------------------------------------*/
/*    Definitions to be concatenated to ast.mjs when generated.        */
/*---------------------------------------------------------------------*/
export { isNative, wrap } from "./_ast.hop";
import { registerWrapper } from "./_ast.hop";
import { pairp, forEach } from "./_list.hop";

/*---------------------------------------------------------------------*/
/*    toString ...                                                     */
/*---------------------------------------------------------------------*/
J2SNode.prototype.toString = function() {
   return `<${this.clazz}>`;
}

/*---------------------------------------------------------------------*/
/*    j2sLetp ...                                                      */
/*---------------------------------------------------------------------*/
export function j2sLetp(decl) {
   switch (decl.binder) {
      case "let":
      case "let-opt":
      case "let-forin":
	 return true;
      case "var":
      case "param":
      case "record":
      case "export":
	 return false;
      default:
	 throw `j2sLetp: wrong binder "${decl.binder}"`;
   }
}

/*---------------------------------------------------------------------*/
/*    j2sVarp ...                                                      */
/*---------------------------------------------------------------------*/
export function j2sVarp(decl) {
   switch (decl.binder) {
      case "var":
	 return true;
      case "let":
      case "let-opt":
      case "let-forin":
	 return true;
      case "var":
      case "param":
      case "record":
      case "export":
	 return false;
      default:
	 throw `j2sVarp: wrong binder "${decl.binder}"`;
   }
}

/*---------------------------------------------------------------------*/
/*    j2sConstp ...                                                    */
/*---------------------------------------------------------------------*/
export function j2sConstp(decl) {
   if (decl.writable) {
      return false;
   } else {
      switch (decl.binder) {
	 case "let":
	 case "let-opt":
	 case "let-forin":
	 case "export":
	    return true;
	 case "var":
	 case "param":
	 case "record":
	    return false;
	 default:
	    throw `j2sConstp: wrong binder "${decl.binder}"`;
      }
   }
}

/*---------------------------------------------------------------------*/
/*    j2sfunExpressionp ...                                            */
/*---------------------------------------------------------------------*/
export function j2sfunExpressionp(fun) {
   if (fun.decl instanceof J2SDeclFun) {
      return fun.decl.expression;
   } else {
      return false;
   }
}

/*---------------------------------------------------------------------*/
/*    hopcWalk ...                                                     */
/*---------------------------------------------------------------------*/
function walk(proc) {
   proc(this);
   for (let k in this) {
      const p = this[k];
      if (p instanceof Object) {
	 if ("hopcWalk" in p) {
	    p.hopcWalk(proc);
	 } else if (pairp(p)) {
	    forEach(e => {
	       if ("hopcWalk" in e) {
		  e.hopcWalk(proc);
	       }
	    }, p);
	 }
      }
   }
}

J2SNode.prototype.hopcWalk = walk;
J2SImportPath.prototype.hopcWalk = walk;
J2SImportName.prototype.hopcWalk = walk;

