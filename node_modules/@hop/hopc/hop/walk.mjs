/* generated file (node_modules/hopc/hop/Makefile), do not edit (02 December 2024) */

import * as ast from './ast.mjs';


ast.J2SNode.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   return _ast;
};


ast.J2SMeta.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.stmt );
   _ast.stmt = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SSeq.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   _ast.nodes.forEach( function( v, i, a ) {
      Array.prototype.splice.call( arguments, 0, 1, v );
      a[ i ] = _this.walkNode.apply( _this, arguments );
   } );
   return _ast;
};


ast.J2SProgram.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   _ast.headers.forEach( function( v, i, a ) {
      Array.prototype.splice.call( arguments, 0, 1, v );
      a[ i ] = _this.walkNode.apply( _this, arguments );
   } );
   _ast.decls.forEach( function( v, i, a ) {
      Array.prototype.splice.call( arguments, 0, 1, v );
      a[ i ] = _this.walkNode.apply( _this, arguments );
   } );
   _ast.nodes.forEach( function( v, i, a ) {
      Array.prototype.splice.call( arguments, 0, 1, v );
      a[ i ] = _this.walkNode.apply( _this, arguments );
   } );
   return _ast;
};


ast.J2SBindExit.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.stmt );
   _ast.stmt = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SReturn.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.expr );
   _ast.expr = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SReturnYield.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.expr );
   _ast.expr = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.kont );
   _ast.kont = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SWith.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.obj );
   _ast.obj = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.block );
   _ast.block = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SThrow.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.expr );
   _ast.expr = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2STry.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.body );
   _ast.body = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.catch );
   _ast.catch = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.finally );
   _ast.finally = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SCatch.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.body );
   _ast.body = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SStmtExpr.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.expr );
   _ast.expr = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SSequence.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   _ast.exprs.forEach( function( v, i, a ) {
      Array.prototype.splice.call( arguments, 0, 1, v );
      a[ i ] = _this.walkNode.apply( _this, arguments );
   } );
   return _ast;
};


ast.J2SVarDecls.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   _ast.decls.forEach( function( v, i, a ) {
      Array.prototype.splice.call( arguments, 0, 1, v );
      a[ i ] = _this.walkNode.apply( _this, arguments );
   } );
   return _ast;
};


ast.J2SLetBlock.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   _ast.decls.forEach( function( v, i, a ) {
      Array.prototype.splice.call( arguments, 0, 1, v );
      a[ i ] = _this.walkNode.apply( _this, arguments );
   } );
   _ast.nodes.forEach( function( v, i, a ) {
      Array.prototype.splice.call( arguments, 0, 1, v );
      a[ i ] = _this.walkNode.apply( _this, arguments );
   } );
   return _ast;
};


ast.J2SAssig.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.lhs );
   _ast.lhs = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.rhs );
   _ast.rhs = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SSwitch.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.key );
   _ast.key = _this.walkNode.apply( _this, arguments );
   _ast.cases.forEach( function( v, i, a ) {
      Array.prototype.splice.call( arguments, 0, 1, v );
      a[ i ] = _this.walkNode.apply( _this, arguments );
   } );
   return _ast;
};


ast.J2SLabel.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.body );
   _ast.body = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SFor.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.init );
   _ast.init = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.test );
   _ast.test = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.incr );
   _ast.incr = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.body );
   _ast.body = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SForIn.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.lhs );
   _ast.lhs = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.obj );
   _ast.obj = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.body );
   _ast.body = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SWhile.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.test );
   _ast.test = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.body );
   _ast.body = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SCase.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.expr );
   _ast.expr = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.body );
   _ast.body = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SDefault.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.body );
   _ast.body = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2STemplate.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   _ast.exprs.forEach( function( v, i, a ) {
      Array.prototype.splice.call( arguments, 0, 1, v );
      a[ i ] = _this.walkNode.apply( _this, arguments );
   } );
   return _ast;
};


ast.J2SParen.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.expr );
   _ast.expr = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SUnary.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.expr );
   _ast.expr = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SBinary.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.lhs );
   _ast.lhs = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.rhs );
   _ast.rhs = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SAccess.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.obj );
   _ast.obj = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.field );
   _ast.field = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SCacheCheck.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.obj );
   _ast.obj = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SCacheUpdate.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.obj );
   _ast.obj = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SCall.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.fun );
   _ast.fun = _this.walkNode.apply( _this, arguments );
   _ast.thisargs.forEach( function( v, i, a ) {
      Array.prototype.splice.call( arguments, 0, 1, v );
      a[ i ] = _this.walkNode.apply( _this, arguments );
   } );
   _ast.args.forEach( function( v, i, a ) {
      Array.prototype.splice.call( arguments, 0, 1, v );
      a[ i ] = _this.walkNode.apply( _this, arguments );
   } );
   return _ast;
};


ast.J2SNew.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.clazz );
   _ast.clazz = _this.walkNode.apply( _this, arguments );
   _ast.args.forEach( function( v, i, a ) {
      Array.prototype.splice.call( arguments, 0, 1, v );
      a[ i ] = _this.walkNode.apply( _this, arguments );
   } );
   return _ast;
};


ast.J2SAssig.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.lhs );
   _ast.lhs = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.rhs );
   _ast.rhs = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SFun.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.body );
   _ast.body = _this.walkNode.apply( _this, arguments );
   _ast.params.forEach( function( v, i, a ) {
      Array.prototype.splice.call( arguments, 0, 1, v );
      a[ i ] = _this.walkNode.apply( _this, arguments );
   } );
   return _ast;
};


ast.J2SSvc.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.body );
   _ast.body = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.init );
   _ast.init = _this.walkNode.apply( _this, arguments );
   _ast.params.forEach( function( v, i, a ) {
      Array.prototype.splice.call( arguments, 0, 1, v );
      a[ i ] = _this.walkNode.apply( _this, arguments );
   } );
   return _ast;
};


ast.J2SMethod.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.function );
   _ast.function = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.method );
   _ast.method = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SObjInit.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   _ast.inits.forEach( function( v, i, a ) {
      Array.prototype.splice.call( arguments, 0, 1, v );
      a[ i ] = _this.walkNode.apply( _this, arguments );
   } );
   return _ast;
};


ast.J2SDataPropertyInit.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.name );
   _ast.name = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.val );
   _ast.val = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SAccessorPropertyInit.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.name );
   _ast.name = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.get );
   _ast.get = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.set );
   _ast.set = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SArray.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   _ast.exprs.forEach( function( v, i, a ) {
      Array.prototype.splice.call( arguments, 0, 1, v );
      a[ i ] = _this.walkNode.apply( _this, arguments );
   } );
   return _ast;
};


ast.J2SSpread.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.expr );
   _ast.expr = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SDeclInit.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.val );
   _ast.val = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SWithRef.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.expr );
   _ast.expr = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SIf.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.test );
   _ast.test = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.then );
   _ast.then = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.else );
   _ast.else = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SPrecache.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   _ast.accesses.forEach( function( v, i, a ) {
      Array.prototype.splice.call( arguments, 0, 1, v );
      a[ i ] = _this.walkNode.apply( _this, arguments );
   } );
   Array.prototype.splice.call( arguments, 0, 1, _ast.test );
   _ast.test = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.then );
   _ast.then = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.else );
   _ast.else = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SIfIsRecord.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.test );
   _ast.test = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.then );
   _ast.then = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.else );
   _ast.else = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SCond.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.test );
   _ast.test = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.then );
   _ast.then = _this.walkNode.apply( _this, arguments );
   Array.prototype.splice.call( arguments, 0, 1, _ast.else );
   _ast.else = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SDollar.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.node );
   _ast.node = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SYield.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.expr );
   _ast.expr = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SKont.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.body );
   _ast.body = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SCast.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.expr );
   _ast.expr = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SCheck.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.expr );
   _ast.expr = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SClass.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.super );
   _ast.super = _this.walkNode.apply( _this, arguments );
   _ast.elements.forEach( function( v, i, a ) {
      Array.prototype.splice.call( arguments, 0, 1, v );
      a[ i ] = _this.walkNode.apply( _this, arguments );
   } );
   return _ast;
};


ast.J2SClassElement.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.prop );
   _ast.prop = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SDProducer.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.expr );
   _ast.expr = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SDConsumer.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.expr );
   _ast.expr = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SPragma.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   _ast.vals.forEach( function( v, i, a ) {
      Array.prototype.splice.call( arguments, 0, 1, v );
      a[ i ] = _this.walkNode.apply( _this, arguments );
   } );
   return _ast;
};


ast.J2SImport.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.dollarpath );
   _ast.dollarpath = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SImportDynamic.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.path );
   _ast.path = _this.walkNode.apply( _this, arguments );
   return _ast;
};


ast.J2SExportDefault.prototype.HopcWalk = function( ast ) {
   var _this = this;
   var _ast = ast;
   Array.prototype.splice.call( arguments, 0, 1, _ast.expr );
   _ast.expr = _this.walkNode.apply( _this, arguments );
   return _ast;
};


