/*=====================================================================*/
/*    serrano/prgm/project/hop/hop/node_modules/hopc/hop/hopc.mjs      */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Thu Jun 26 08:21:30 2014                          */
/*    Last change :  Tue Jun  4 08:21:14 2024 (serrano)                */
/*    Copyright   :  2014-24 Manuel Serrano                            */
/*    -------------------------------------------------------------    */
/*    HOPC http plugin help functions                                  */
/*=====================================================================*/
import * as Ast from "./ast.mjs";
import * as Walk from "./walk.mjs";
import * as JS2Scheme from "./_js2scheme.hop";
import * as List from "./_list.hop";
import { $ioParseError } from "./error.mjs";

export * as ast from "./ast.mjs";
export * as list from "./_list.hop";
export { Parser } from "./_js2scheme";
export { locToLnumCol, $ioParseError } from "./error.mjs";
export { generate } from "./generate.mjs";
export { compileErrorHandler };

/*---------------------------------------------------------------------*/
/*    compileErrorHandler ...                                          */
/*---------------------------------------------------------------------*/
function compileErrorHandler(err) {
   if (err && err.obj && err.obj.loc?.filename) {
      $ioParseError({
	 "fname": err.obj.loc.filename,
	 "location": err.obj.loc?.offset ?? -1,
	 "msg": "Parse error",
	 "message": err.msg || err.message,
	 "obj": err.obj,
	 forceexit: true
      });
      throw "syntax error.";
   } else if (err && err?.fname && (typeof err?.location === "number")) {
      $ioParseError({
	 "fname": err.fname,
	 "location": err.location,
	 "message": err.msg || err.message,
	 "obj": err.obj,
	 forceexit: true
      });
      throw "syntax error.";
   } else if (err && (typeof err?.location === "number")) {
      $ioParseError({
	 "fname": err.location.filename,
	 "location": err.location.pos || err.location.offset,
	 "msg": "Parse error",
	 "message": err.msg || err.message,
	 "obj": err.obj,
	 forceexit: true
      });
      throw "syntax error.";
   } else {
      throw err;
   }
}
    
/*---------------------------------------------------------------------*/
/*    HopcAstPrototype ...                                             */
/*---------------------------------------------------------------------*/
var HopcAstPrototype = {
   toResponse: function(req) {
      throw "hopc.js: toResponse not implemented (see HopcAstPrototype)";
      // MS 8Dec20223, commented out to remove the Hop dependency
      // return Hop.HTTPResponseString(
      //   Ast.tojson(this),
      //   {
      //      request: req,
      //      contentType: "application/json"
      //   }
      // );
   },
   toJSON: function() { return this.__ast__ }
}

/*---------------------------------------------------------------------*/
/*    initNode ...                                                     */
/*---------------------------------------------------------------------*/
function initNode(node, env) {
   if (!(node instanceof Object) || (node instanceof Function)) {
      return node;
   } else if ("__node__" in node) {
      var o = new Ast[node.__node__];

      for (var k in node) {
	 o[k] = initNode(node[k], env);
      }

      if ("key" in node) {
	 env[node.key] = o;
      }

      return o;
   } else if (node instanceof Array) {
      return node.map(function(v, i, a) { return initNode(v, env) });
   } else if ("__undefined__" in node) {
      return undefined;
   } else {
      return node;
   }
}

/*---------------------------------------------------------------------*/
/*    linkNode ...                                                     */
/*---------------------------------------------------------------------*/
function linkNode(node, env) {
   
   if (!(node instanceof Object) || (node instanceof Function)) {
      return node;
   } else if ("__node__" in node) {
      for (var k in node) {
	 node[k] = linkNode(node[k], env);
      }

      return node;
   } else if (node instanceof Array) {
      node.forEach(function(v, i, a) {
	 a[i] = linkNode(v, env);
      });

      return node;
   } else if ("__ref__" in node) {
      if (env[node.__ref__] === undefined) {
	 throw "hopc, wrong ast: dangling reference (" + node.__ref__  
	    + "): `" + node.__nodeType__ + "' " + node.loc;
      }
      
      return env[node.__ref__];
   } else {
      return node;
   }
}

/*---------------------------------------------------------------------*/
/*    intern ...                                                       */
/*    -------------------------------------------------------------    */
/*    Intialize the Ast obtained by parsing JSON serialization         */
/*---------------------------------------------------------------------*/
function intern(ast) {
   if ("__ast__" in ast) {
      var env = {};
      var o = { __hopc_ast__: true };

      o.__ast__ = linkNode(initNode(ast.__ast__, env), env);
      o.__proto__ = HopcAstPrototype;

      return o;
   } else {
      throw "Illegal ast " + ast;
   }
}

/*---------------------------------------------------------------------*/
/*    extern ...                                                       */
/*---------------------------------------------------------------------*/
function extern(ast) {
   return Ast.tojson(ast);
}

/*---------------------------------------------------------------------*/
/*    HopcAstWalker ...                                                */
/*---------------------------------------------------------------------*/
function HopcAstWalker(obj) {

   function findWalker(walker, ast) {
      var a = ast;

      while ("__node__" in a) {
	 if (a.__node__ in walker) {
	    return walker[a.__node__];
	 } else {
	    a = a.__proto__;
	 }
      }

      return ast.HopcWalk;
   }

   if (obj instanceof Object) {
      for (var f in obj) {
	 this.f = obj[f];
      }
   }
   
   return {
      walkNode: function walkNode(node) {
	 if (node instanceof Array) {
	    var _this = this;
	    node.forEach(function(v, i, a) {
	       Array.prototype.splice.call(arguments, 0, 1, v);
	       a[i] = walkNode.apply(_this, arguments);
	    });
	       
	    return node;
	 } else if (!(node instanceof Object)) {
	    return node;
	 } else if ("__node__" in node) {
	    return findWalker(this, node).apply(this, arguments);
	 } else {
	    return node;
	 }
      },
      walk: function walk(ast) {
	 var _ast = ast;
	 if ("__ast__" in ast) {
	    Array.prototype.splice.call(arguments, 0, 1, ast.__ast__);
	    _ast.__ast__ = this.walkNode.apply(this, arguments);
	    return _ast;
	 } else {
	    for (var k in ast) {
	       ast[k] = this.walkNode(ast[k]);
	    }
	    return ast;
	 }
      }
   }
}
